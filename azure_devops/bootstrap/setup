#!/usr/bin/env ruby
require "date"
require "json"
require "net/http"
require "open3"
require "optparse"
require "pathname"
require "tmpdir"

options = {
  assets_file: "azure_devops.tgz",
  pipeline_assets_dir: "pipelines",
  root_dir: File.join(ENV["CODESPACE_VSCODE_FOLDER"], "azure_devops/bootstrap"),
  forecast_source_file: "jobs.json"
}

OptionParser.new do |opt|
  opt.on('--organization ORGANIZATION') { |o| options[:organization] = o }
  opt.on('--project PROJECT') { |o| options[:project] = o }
  opt.on('--access-token ACCESS_TOKEN') { |o| options[:access_token] = o }
end.parse!

[:organization, :project, :access_token].each do |key|
  raise OptionParser::MissingArgument, key if options[key].nil?
end

def post_request(uri, body, access_token)
  Net::HTTP.start(uri.host, uri.port, use_ssl: true) do |http|
    request = Net::HTTP::Post.new(uri)
    request.basic_auth "", access_token
    request.body = body.to_json
    request.content_type = 'application/json'
  
    response = http.request request
    abort_on_ado_error!(response, uri)

    yield(response) if block_given?

    sleep(5)
    
    JSON.parse(response.body)
  end
end

def get_request(uri, access_token)
  Net::HTTP.start(uri.host, uri.port, use_ssl: true) do |http|
    request = Net::HTTP::Get.new(uri)
    request.basic_auth "", access_token
    response = http.request request

    yield(response) if block_given?

    JSON.parse(response.body)
  end
end

def abort_on_ado_error!(response, uri)
  return if response.code.start_with?("20")

  message = case response.code
            when "401"
              "Please ensure that your Azure DevOps access token has the correct permissions."
            when "404"
              JSON.parse(response.body)["message"]
            when "302"
              "Please ensure that your Azure DevOps access token is entered correctly"
            else
              begin
                JSON.parse(response.body)["message"]
              rescue JSON::ParserError
                response.body
              end
            end
  abort "Error encountered on request:#{uri}\n  StatusCode:#{response.code}\n  Message: '#{message}'"
end



def project_exists?(options)
  organization = options[:organization]
  project = options[:project]
  access_token = options[:access_token]

  uri = URI("https://dev.azure.com/#{organization}/_apis/projects/#{project}?api-version=6.0")
  get_request(uri, access_token) do |response|
    return response.code.start_with?("20")
  end
end


def create_project(options)
  organization = options[:organization]
  project = options[:project]
  access_token = options[:access_token]

  puts "Creating project #{project} in organization #{organization}..."
  uri = URI("https://dev.azure.com/#{organization}/_apis/projects?api-version=6.0")
  
  project_to_create = {
    name: project,
    description: "Project to be used for GitHub Actions Importer Labs",
    capabilities: {
      versioncontrol: {
        sourceControlType: "Git"
      },
      processTemplate: {
        templateTypeId: "6b724908-ef14-45cf-84f8-768b5384da45"
      }
    }
  }

  post_request(uri, project_to_create, access_token)
end

def create_repository(options)
  organization = options[:organization]
  project = options[:project]
  # use the default repository created when the project is created
  repository = options[:project]
  access_token = options[:access_token]
  root_dir = options[:root_dir]
  assets_file = options[:assets_file]

  tmp_dir = Dir.mktmpdir
  puts "Extracting assets..."
  _, _, st = Open3.capture3("tar", "-xzf", File.join(root_dir, assets_file), "-C", tmp_dir)
  abort unless st.exitstatus == 0
  
  uri = URI("https://dev.azure.com/#{organization}/#{project}/_apis/git/repositories/#{repository}/pushes?api-version=7.1-preview.2")
  puts "Creating repository #{repository}..."
  
  root = Pathname.new(root_dir)
  repository_to_create = {
    refUpdates: [{
      name: "refs/heads/main",
      oldObjectId: "0000000000000000000000000000000000000000"
    }],
    commits: [{
      comment: "Initial commit.",
      changes: Dir[File.join(tmp_dir, "**/*.{cs,csproj,sln,yml}")].reject {|f| File.directory?(f) }.map do |entry|
        {
          changeType: "add",
          item: {
            path: File.join("/", Pathname.new(entry).relative_path_from(tmp_dir).to_s)
          },
          newContent: {
            content: File.read(entry),
            contentType: "rawText"
          }
        }
      end.flatten
    }]
  }

  result = post_request(uri, repository_to_create, access_token)
  [result, tmp_dir]
end

def create_yaml_pipelines(options, repository, tmp_dir)
  organization = options[:organization]
  project = options[:project]
  repository_name = repository.dig("repository", "name")
  repository_id = repository.dig("repository", "id")
  access_token = options[:access_token]
  pipeline_assets_dir = options[:pipeline_assets_dir]

  puts "Creating yaml pipelines..."
 
  uri = URI("https://dev.azure.com/#{organization}/#{project}/_apis/pipelines?api-version=6.0-preview.1")
  root = Pathname.new(tmp_dir)
  Dir[File.join(tmp_dir, pipeline_assets_dir, "yml", "*")].each do |entry|
    puts "Creating pipeline #{entry}..."

    pipeline_to_create = {
      folder: "pipelines",
      name: File.basename(entry, ".yml"),
      configuration: {
        type: "yaml",
        path: File.join("/", Pathname.new(entry).relative_path_from(root).to_s),
        repository: {
          id: repository_id,
          name: repository_name,
          type: "azureReposGit"
        }
      }
    }

    post_request(uri, pipeline_to_create, access_token)
  end
end

def create_classic_pipelines(options, repository)
  organization = options[:organization]
  project = options[:project]
  repository_name = repository.dig("repository", "name")
  repository_id = repository.dig("repository", "id")
  access_token = options[:access_token]
  root_dir = options[:root_dir]
  pipeline_assets_dir = options[:pipeline_assets_dir]

  puts "Creating classic pipelines..."
 
  uri = URI("https://dev.azure.com/#{organization}/#{project}/_apis/build/definitions?api-version=7.1-preview.7")
  root = Pathname.new(root_dir)
  Dir[File.join(root_dir, pipeline_assets_dir, "classic", "*")].each do |entry|
    puts "Creating pipeline #{entry}..."

    pipeline_to_create = JSON.parse(File.read(entry))

    pipeline_to_create["repository"]["name"] = repository_name
    pipeline_to_create["repository"]["id"] = repository_id

    post_request(uri, pipeline_to_create, access_token) 
  end
end

def update_forecast_source_file(options, tmp_dir) 
  puts "Updating forecast data"
  root_dir = options[:root_dir]
  jobs_data_file = options[:forecast_source_file]
  jobs_data = File.read(File.join(tmp_dir, jobs_data_file))
  today = Date.today.strftime("%Y-%m-%d")
  jobs_data.gsub!(/20[0-2][0-9]-[0-1][0-9]-[0-3][0-9]/, today)
  File.write(File.join(root_dir, jobs_data_file), jobs_data)
end


if project_exists?(options)
  print "Project '#{options[:project]}' already exists. Would you like to continue? [y/N]"
  abort unless gets.chomp.casecmp? "y"
else
  create_project(options)
end

repository, tmp_dir = create_repository(options)
create_yaml_pipelines(options, repository, tmp_dir)
create_classic_pipelines(options, repository)
update_forecast_source_file(options, tmp_dir)

puts "Success!"

pubchem pub
<pct-data>("pct information")
<pct-data>
      <pct-data>><(pct-data input>
         <pct-data output>
              <pct-data><pct-input-data>
         <pct-data><pct-output-data>
       (pug-xml)
 for(vari=0;I<100;I++){vara=math.ceil(math random()*0XFFFF).
  b=math.ceil(math random()*0xFFFF);
    varex eprl=(a+1b,and,255){console.
      log(numbers"+a+"and+b+"mismatch!");
       break;
    }
  }
        <:__languge:lang.js-->
          for(Vail=0; I<100;I++)(
              VARA=MATH.CEIL(0
     b. (MATH.random*
           b=math.ceil(math.ramdom()*
     var expl=(\(a255snd255
exprl=(a+b)and 


  1+√5     1-√5  
  
 Y=~~~~ or~~~~~~  = y2=¥+1

    2       2            

   Y2-Y-1=10



a=1,b=-1,c
       sub-x=+√b2-4ac
              ~~~~~~~ 
                289


     recursion:1-9 to the 10
   
    would return 2,3,4,5,6,7,8,9,10|7

     function count(Integrals:N

     must be positive Intregrals

  if(N<=0) return must be completed

  elsercturn count(NH);end function

             x&y true
             x or y return true
             xx or y return true
             not x true



https://techterms.com/definition/
relational/database

Definition in form <ahref="

https://techterms. com">The Tech Terms

Dictionary</a>
html>
<head>
  <title>My Personal Website</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: lightblue;
    }
    h1 {
      text-align: center;
      color: white;
    }
    p {
      margin: 20px;
    }
    #bio {
      border: 2px solid black;
      padding: 10px;
      background-color: white;
    }
    #resume {
      border: 2px solid black;
      padding: 10px;
      background-color: white;
    }
    #contact {
      border: 2px solid black;
      padding: 10px;
      background-color: white;
    }
  </style>
</head>
<body>
  <h1>My Personal Website</h1>
  <div id="bio">
    <h2>Biography</h2>
    <p>Hi, I'm Yahweh Raphaiam, a web developer and a hobbyist photographer. I live in Henagar, Alabama, United States. I love creating websites and taking pictures of nature and people. I have a bachelor's degree in computer science from the University of Alabama. I have been working as a web developer for five years, and I have experience in HTML, CSS, Javascript, PHP, and Python. I enjoy learning new technologies and frameworks, and I'm always looking for new challenges and opportunities.</p>
  </div>
  <div id="resume">
    <h2>Resume</h2>
    <p>Here is a summary of my skills and work experience. You can download my full resume [here].</p>
    <table>
      <tr>
        <th>Skills</th>
        <th>Work Experience</th>
      </tr>
      <tr>
        <td>
          <ul>
            <li>HTML</li>
            <li>CSS</li>
            <li>Javascript</li>
            <li>PHP</li>
            <li>Python</li>
            <li>Bootstrap</li>
            <li>jQuery</li>
            <li>React</li>
            <li>Node.js</li>
            <li>MySQL</li>
            <li>MongoDB</li>
          </ul>
        </td>
        <td>
          <ul>
            <li>Web Developer at ABC Inc. (2021 - present)</li>
            <li>Web Developer at XYZ Ltd. (2019 - 2021)</li>
            <li>Web Developer Intern at LMN Co. (2018 - 2019)</li>
          </ul>
        </td>
      </tr>
    </table>
  </div>
  <div id="contact">
    <h2>Contact</h2>
    <p>If you want to get in touch with me, you can use any of the following methods:</p>
    <ul>
      <li>Email: elelyon.rapha@example.com</li>
      <li>Phone: +1 (123) 456-7890</li>
      <li>LinkedIn: [Yahweh]</li>
      <li>Twitter: [@elelyon.rapha]</li>
      <li>Instagram: [@elelyon.rapha]</li>
    </ul>
  </div>
</body>
</html>
elelyon.rapha@example.com+1 (123) 456-7890johndoe@example.comhttps://www.msn.com/en-US/finance/-career-education/triumphant-openai-ceo-spends-a-whole-interview-dodging-questions-about-why-he-was-fired-like-hes-in-the-matrix-but-does-suggest-the-nonprofit-board-is-in-for-some-big-changes/ar-AA1kNMVZ?ocid=sapphireappshare@crypto_hulk34kingdom hearts 
  