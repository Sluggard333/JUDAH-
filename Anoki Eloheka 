$ gh actions-importer version
gh version 2.14.3 (2022-07-26)
gh actions-importer        github/gh-actions-importer v0.1.12
actions-importer/cli       unknown---
title: Site policy documentation
shortTitle: Site policy
redirect_from:
  - /categories/61/articles
  - /categories/site-policy
  - /github/site-policy
versions:
  fpt: '*'
topics:
  - Policy
  - Legal
children:
  - /github-terms
  - /acceptable-use-policies
  - /privacy-policies
  - /other-site-policies
  - /content-removal-policies
  - /security-policies
  - /github-company-policies
  - /site-policy-deprecated
---9f72c3e44226291bdbcabce92a2e3964c8c39224=PV4
_articles/zh-hant/maintaining-balance-for-open-source-maintainers.md<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 128 128"><path fill="#659AD3" d="M115.4 30.7L67.1 2.9c-.8-.5-1.9-.7-3.1-.7-1.2 0-2.3.3-3.1.7l-48 27.9c-1.7 1-2.9 3.5-2.9 5.4v55.7c0 1.1.2 2.4 1 3.5l106.8-62c-.6-1.2-1.5-2.1-2.4-2.7z"/><path fill="#03599C" d="M10.7 95.3c.5.8 1.2 1.5 1.9 1.9l48.2 27.9c.8.5 1.9.7 3.1.7 1.2 0 2.3-.3 3.1-.7l48-27.9c1.7-1 2.9-3.5 2.9-5.4V36.1c0-.9-.1-1.9-.6-2.8l-106.6 62z"/><path fill="#fff" d="M85.3 76.1C81.1 83.5 73.1 88.5 64 88.5c-13.5 0-24.5-11-24.5-24.5s11-24.5 24.5-24.5c9.1 0 17.1 5 21.3 12.5l13-7.5c-6.8-11.9-19.6-20-34.3-20-21.8 0-39.5 17.7-39.5 39.5s17.7 39.5 39.5 39.5c14.6 0 27.4-8 34.2-19.8l-12.9-7.6z"/></svg>-balance-for-open-source-maintainers.mdhttp://www.w3.org/2000/svg01281645{
  "name": "Codespace to perform GitHub Actions Importer Labs",
  "remoteEnv": {
    "DOCKER_ARGS": "--network=host",
    "INSTALLATION_TYPE": "labs"
  },
  "hostRequirements": {
    "cpus": 4,
    "memory": "8gb",
    "storage": "32gb"
  },
  "customizations": {
    "vscode": {
      "settings": {
        "files.autoSave": "onFocusChange",
        "editor.tabSize": 2
      },
      "extensions": [
        "ms-azuretools.vscode-docker"
      ]
    }
  },
  "postCreateCommand": "gh extension install github/gh-actions-importer || echo 'Could not auto-build. Skipping.' "
}
1d99d42142deafd098d69b8047d7ef8021a8d543
 Welcome to Apache's Jira issue tracker!

Anyone is free to find issues. You must register and login if you want to create, comment or vote on, or watch issues. Only developers can edit, prioritize, schedule or resolve issues.

Note that public signup for this Jira instance is disabled. Go to the self-serve signup page to apply for an account, which needs a projects approval.

We migrated some projects here from Bugzilla. If you had a Bugzilla account, log in using your email address as your username. You will need to have a new password mailed to you. You can search for issues by their old Bugzilla IDs in the quick search box above.

Need to create an INFRA ticket? See the INFRA Jira Guidelines on the Infra Website.

If your ASF project wants to use Jira goto our selfserve to setup a new project.

PRIVACY NOTICE: ASF Jira is an open issue tracking system. Activity on most issues, will be publicly visible. Email addresses are not visible to other users unless you set your email address as your username
        https://github.com/yangsenius/learning-to-learn-by-pytorch/assets/88852908/c1c43654-15d8-483c-b96b-adb18e271284![Icosahedral_tensegrity_structure.png](https://github.com/yangsenius/learning-to-learn-by-pytorch/assets/88852908/c1c43654-15d8-483c-b96b-adb18e271284)InstantaneousChrist el
13003501998
Program Overview
Privileges of Membership
Over 1300 organizations and individuals parti-
cipate in the JCP program. While there are no
obligatory duties, members have the opportunity
to influence the evolution of Java technology
through the development of Java Specification
Requests (JSR).
Members can license their Java specifications
under a variety of licenses, including open source
options. Anyone must be able to create an indepen-
dent implementation as long as they license and pass the
TCK to ensure compatibility. Members must also
make the option available to license the TCK and
RI separately. In addition, individuals, educational
organizations, and qualified nonprofits must have
access to the TCKs free of charge.
Successful Members:
• Review proposed JSRs and drafts
• Submit JSRs
• Nominate themselves or others to serve
on Expert Groups, which create or revise
specifications
• Build independent implementations
• Vote on EC membership ballots
• Nominate themselves for an EC seat
Members of an Expert Group may also:
• Serve as the Specification Lead of an
Expert Group
• Select others to join their Expert Group
• Use feedback from members and the public
to improve the quality of a specification
• Complete a specification, its RI, and its
associated TCK
• Maintain a specification after it is written
How to Become a Member
A person or organization can become a member
by signing the Java Specification Participation
Agreement (JSPA). This agreement between an
organization or individual and Oracle establishes
each member’s rights and obligations when partici-
pating in the JCP program. To cover costs, the JSPA
charges a nominal fee for commercial entities, but it
is free for Java User Groups and individuals.
The Java Specification Review Process
Currently, over 350 JSRs are in development.
A specification follows four major steps as it
progresses through the process, as shown in
the timeline.
1. INITIATION: A specification is initiated by one or
more members and approved for development
by the Executive Committee.
2. EARLY DRAFT: A group of experts is formed to
draft the specification for the public, community
and the Executive Committee to review. The
Expert Group uses feedback from the review to
revise the specification.
3. PUBLIC DRAFT: The draft is posted on the Internet
for a second review by the public. The Expert
Group uses the feedback to refine the document.
The Executive Committee decides if the draft
should proceed to the next step. The Specification
Lead ensures that the RI and its associated TCK
are completed before sending the specification to
the Executive Committee for final approval.
Java Community Process Program Overview
The Java Community Process (JCP) program is the formalization of the open, inclusive
process that has been used since 1998 to develop and revise Java technology specifications,
reference implementations (RI), and technology compatibility kits (TCK). Javhttps://github.com/bradford80USA/unamed/actions/workflows/azure-container-webapp.yml**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.
**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Desktop (please complete the following information):**
 - OS: [e.g. iOS]
 - Browser [e.g. chrome, safari]
 - Version [e.g. 22]

**Smartphone (please complete the following information):**
 - Device: [e.g. iPhone6]
 - OS: [e.g. iOS8.1]
 - Browser [e.g. stock browser, safari]
 - Version [e.g. 22]

**Additional context**
Add any other context about the problem here.Start a new codespace

Click the Code button on your repository's landing page.
Click the Codespaces tab.
Click Create codespaces on main to create the codespace.
After the codespace has initialized there will be a terminal present.
Verify the GitHub Actions Importer CLI is installed and working. More information on the GitHub Actions Importer extension for the official GitHub CLI can be found here.

Run the following command in the codespace terminal:

gh actions-importer version
Verify the output is similar to below.

$ gh actions-importer version
gh version 2.14.3 (2022-07-26)
gh actions-importer        github/gh-actions-importer v0.1.12
actions-importer/cli       unknown
If gh actions-importer version did not produce similar output, please refer to the troubleshooting section.

Bootstrap a GitLab server
Execute the GitLab setup script that will start a container with GitLab running inside of it. The script should be executed when starting a new codespace or restarting an existing one.

Run the following command from the codespace terminal:

./gitlab/bootstrap/setup.sh
After some time, a pop-up box should appear with a link to the URL for your GitLab server.

You can also access the URL by going to the Ports tab in your terminal. Right-click the URL listed under the Local Address and click the Open in Browser tab.

Open the GitLab server in your browser and use the following credentials to authenticate:

Username: root
Password: actions-importer-labs!
Once authenticated, you should see a GitLab server with a few predefined pipelines in the actions-importer group.

Labs for GitLab
Perform the following labs to learn more about Actions migrations with GitHub Actions Importer:

Configure credentials for GitHub Actions Importer
Perform an audit on GitLab pipelines
Forecast potential build runner usage
Perform a dry-run migration of a GitLab pipeline
Use custom transformers to customize GitHub Actions Importer's behavior
Perform a production migration of a GitLab pipeline
Troubleshoot the GitHub Actions Importer CLI
The CLI extension for GitHub Actions Importer can be manually installed by following these steps:

Verify you are in the codespace terminal

Run this command from within the codespace terminal:

gh extension install github/gh-actions-importer
Verify the result of the install contains:

$ gh extension install github/gh-actions-importer
✓ Installed extension github/gh-actions-importer
Verify GitHub Actions Importer CLI extension is installed and working by running the following command from the codespace terminal:

gh actions-importer versionInstantaneousChrist 
Start a new codespace

Click the Code button on your repository's landing page.
Click the Codespaces tab.
Click Create codespaces on main to create the codespace.
After the codespace has initialized there will be a terminal present.
Verify the GitHub Actions Importer CLI is installed and working. More information on the GitHub Actions Importer extension for the official GitHub CLI can be found here.

Run the following command in the codespace terminal:

gh actions-importer version
Verify the output is similar to below.

$ gh actions-importer version
gh version 2.14.3 (2022-07-26)
gh actions-importer        github/gh-actions-importer v0.1.12
actions-importer/cli       unknown
If gh actions-importer version did not produce similar output, please refer to the troubleshooting section.

Bootstrap a GitLab server
Execute the GitLab setup script that will start a container with GitLab running inside of it. The script should be executed when starting a new codespace or restarting an existing one.

Run the following command from the codespace terminal:

./gitlab/bootstrap/setup.sh
After some time, a pop-up box should appear with a link to the URL for your GitLab server.

You can also access the URL by going to the Ports tab in your terminal. Right-click the URL listed under the Local Address and click the Open in Browser tab.

Open the GitLab server in your browser and use the following credentials to authenticate:

Username: root
Password: actions-importer-labs!
Once authenticated, you should see a GitLab server with a few predefined pipelines in the actions-importer group.

Labs for GitLab
Perform the following labs to learn more about Actions migrations with GitHub Actions Importer:

Configure credentials for GitHub Actions Importer
Perform an audit on GitLab pipelines
Forecast potential build runner usage
Perform a dry-run migration of a GitLab pipeline012864130035019982151300350199887  'answer': 'The kaleidoscope was invented by Sir David Brewster, a Scottish physicist, in 1816.',
  'hits': [
    {'ai_snippets': 'Few objects have played a greater role in underscoring the combined power of light, color, and motion than the kaleidoscope. It was invented in 1816, quite by accident, during experiments with the polarization and refraction of light by the Scottish physicist Sir David Brewster (1781–1868). In an early phase of his research, he placed several long mirrors in a narrow brass cylinder to reflect an image as it traveled from its source to the viewer’s eye. When Brewster peered into the tube, he found that it transformed reality in unimaginable ways. He called his invention the “kaleidoscope,” from the Greek words for “beautiful image viewer.” Before Brewster could patent his design, competitors had purloined the concept and were selling inexpensive versions of cardboard and mirror plate to passersby on the street. The invention was an instant success, for it provided the perfect tool for understanding the powers of fancy and for demonstrating how light, color, and motion caught the eye', 'url': 'https://huntington.org/frontiers/2020-spring-summer/kaleidoscope'},
    {'ai_snippets': 'Several of the diagrams that Brewster included had such a strong geometric character that they spurred public interest in an entirely new range of orderly design. The kaleidoscope had its greatest impact on American quilts. Whereas quilt makers on both sides of the Atlantic had traditionally focused on classical subjects or elegant foliage derived from nature, once the device was invented, they created a variety of innovative geometric designs that either emulated a kaleidoscopic view or looked to Brewster’s published diagrams for inspiration. Kaleidoscopes with two mirrors created a pattern that exploded outward from the center toward the edges in a large starburst. This was particularly obvious in the visual lines that radiated outward from the center of the quilt. In quilts of this type, the seams of adjoining wedges replicate where the image abuts a mirror—to create the star. Kaleidoscopes with a three-mirror system, joined together in a 30-60-90-degree triangle, likewise', 'url': 'https://huntington.org/frontiers/2020-spring-summer/kaleidoscope'},
    {'ai_snippets': 'In 2020, The Huntington published the Becoming America catalog, which includes an essay by antiquarian and consultant Sumpter Priddy titled “The Kaleidoscope and the Fancy Style of the Early Republic.” In the essay, Priddy delves into the intellectual origins of the exuberant Fancy style of painted furniture and quilts in the Fielding Collection and the style’s connections to natural philosophy. The following passage is an excerpt from the essay.', 'url': 'https://huntington.org/frontiers/2020-spring-summer/kaleidoscope'},
    {'ai_snippets': 'Drunkard’s Path Quilt, ca. 1880–90, cotton, pieced, 87 × 87 1/2 in. Jonathan and Karin Fielding Collection of Folk Art. The Huntington Library, Art Museum, and Botanical Gardens.\nBritish academics were intrigued by the charming images, but the colorful scenes provoked a much stronger response in America. There, the kaleidoscope seemed an ideal tool to whet one’s appetite for learning. This ingenious device would help Americans understand the power of the imagination in ways that were far removed from the literary sources that had long dominated British understanding of the subject.', 'url': 'https://huntington.org/frontiers/2020-spring-summer/kaleidoscope'},
    {'ai_snippets': 'Although kaleidoscopes of two, three, and four mirrors produced their respective designs according to the dictates of geometry, their patterns were open to nearly endless interpretations by the viewer. Equally important, the range of ornament produced by the kaleidoscope embodied a new type of creativity that Joseph Addison had envisioned more than a century before when he observed the human capacity to “fancy to itself Things more Great, Strange, or Beautiful, than the Eye ever saw.” The kaleidoscope’s broad appeal in America helped its middle classes embrace abstract ornament.\nBecoming America: Highlights from the Jonathan and Karin Fielding Collection of Folk Art is available online from the Huntington Store.\nSumpter Priddy is an antiquarian and consultant in Alexandria, Virginia.', 'url': 'https://huntington.org/frontiers/2020-spring-summer/kaleidoscope'},
    {'ai_snippets': "How a Scottish scientist's invention influenced 19th-century American decorative art\n“On combinations of four mirrors forming a square” in David Brewster, The Kaleidoscope: Its History, Theory, and Construction (London, 1858), figure 45. Courtesy of The Winterthur Library: Printed Book and Periodical Collection.\nIn 2016, The Huntington opened an addition to the Virginia Steele Scott Galleries of American Art, the Jonathan and Karin Fielding Wing, which features an ongoing exhibition of more than 200 works from the Fieldings’ esteemed collection of 18th- and early 19th-century American paintings, furniture, and related decorative art—some of which are promised gifts to The Huntington.", 'url': 'https://huntington.org/frontiers/2020-spring-summer/kaleidoscope'},
    {'ai_snippets': 'In addition to producing kaleidoscopes with two mirrors that created stunning explosions with colored glass, makers created examples with three and four mirrors, each of which produced a distinct design. Kaleidoscopes with a three-mirror system, joined together in a 60-60-60-degree triangle, repeated the image at the end of the tunnel time and again in a diagonal grid—thereby assuring that multiple replications of the image were firmly imprinted in the storehouse of memory. Indeed, kaleidoscopes with four mirrors facing inward in a square replicated the image in the center as an eight-pointed star. This produced even further options, not only for quilt makers but also for decorative painters. For example, a box from the Fielding Collection with a pink, green, red, and black palette evokes kaleidoscopic patterns.\nBook cover of Becoming America: Highlights from the Jonathan and Karin Fielding Collection of Folk Art, 2020. The Huntington Library, Art Museum, and Botanical Gardens.', 'url': 'https://huntington.org/frontiers/2020-spring-summer/kaleidoscope'},
    {'ai_snippets': 'how light, color, and motion caught the eye and imprinted stunning images in the mind, where they could fuel the creative process.', 'url': 'https://huntington.org/frontiers/2020-spring-summer/kaleidoscope'},
    {'ai_snippets': 'In 1819 Brewster published A Treatise on the Kaleidoscope, in which he presented diagrams of distinct kaleidoscopes—those having two, three, or four mirrors grouped together in the tube—to show how a varied arrangement of mirrors would alter the image. He discussed the device’s ability to produce patterns for household decoration in record time: “It will create, in a single hour, what a thousand artists could not invent in the course of a year.” It could be used for a variety of objects, from stained-glass windows for cathedrals to household carpets and floorcloths. It was no longer necessary to devote significant time to drawing an entire design on paper. Rather, one could sketch a segment of the pattern and rely on the kaleidoscope to quickly expand the design into a variety of options.\nLone Star Quilt—Red, White, and Blue, ca. 1850, glazed cotton, pieced, 96 1/2 × 94 in. Jonathan and Karin Fielding Collection of Folk Art. The Huntington Library, Art Museum, and Botanical Gardens.', 'url': 'https://huntington.org/frontiers/2020-spring-summer/kaleidoscope'},
    {'ai_snippets': 'Box with Painted Geometric Design, ca. 1840, pine and paint, 6 1/2 × 14 1/8 × 9 in. Jonathan and Karin Fielding Collection of Folk Art. The Huntington Library, Art Museum, and Botanical Gardens.\nInfluenced by the kaleidoscope, women moved away from relying on large pieces of fabric and toward the use of tiny, multicolored pieces, carefully stitched together, to emulate the bits of glass in a kaleidoscope—and they expanded the quilts to completely cover a bedstead. It was only a matter of time before house painters transferred the patterns to canvas fabric to produce eye-catching floorcloths and table covers, expanding Fancy’s influence on American homes from wall to wall.', 'url': 'https://huntington.org/frontiers/2020-spring-summer/kaleidoscope'},
    {'ai_snippets': 'together in a 30-60-90-degree triangle, likewise replicated the design, yet with subtle variety. Brewster depicted the pattern within an octagonal format—a diagram to which quilt makers often looked for octagonal piecework.', 'url': 'https://huntington.org/frontiers/2020-spring-summer/kaleidoscope'},
    {'ai_snippets': 'In this way, the kaleidoscope shaped Americans’ expectations for non-representational design and transformed middle-class homesteads. Although British kaleidoscopes were expensive devices made with hollow brass cylinders and highly polished mirrors, Americans were so infatuated by the device that they produced inexpensive examples of pasteboard or tinned sheet iron, and they relied on simple mirror plate rather than polished lenses. Foreign visitors to America were astounded to find that middle-class Americans were inspired by this “philosophical instrument.”', 'url': 'https://huntington.org/frontiers/2020-spring-summer/kaleidoscope'},
    {'ai_snippets': 'Kaleidoscopes were invented in 1816 by David Brewster a Scottish inventor. Sir David Brewster was studying many aspects of physical Sciences including polarization optics and the properties of light. While looking at some objects at the end of 2 mirrors He noticed patterns and colors were recreated and reformed into Beautiful new arrangements. He named this new invention after the greek words meaning beautiful form watcher. kalos, the greek word for beautiful, eodos, the greek word = shape scopeo, the greek word = to look at.\nIn 1817 He patented his idea but is seems a incorrectly worded patent made it easy for others to copy without much in way of legal recourse. David Brewster actually did not see much in way of financial success from this invention as other inventors were aggressive in mass producing this new art form. Sir David Brewster was instrumental in many light and optical advances including a lens design for lighthouses and in 1849 He made advances in Stereoscope designs.', 'url': 'https://www.kaleidoscopestoyou.com/hiofka1.html'},
    {'ai_snippets': "Kaleidoscopes became very popular during the Victorian age as a parlor diversion. Charles Bush was a very popular United States kaleidoscope maker during the 1870s for his parlor kaleidoscope. He patent his idea in 1873 and to this day collectors search for this particular kaleidoscope. These were made with a round base and a rarer 4 footed version.\nMany of the baby boomers remember receiving a toy kaleidoscope as a kid. It was not until the late 1970s that a renaissance in Kaleidoscope artistry began. In 1980 a first exhibition of kaleidoscopes helped fuel the interest in kaleidoscopes as an art form. Today there are 100's of great kaleidoscope artists and kaleidoscope makers.", 'url': 'https://www.kaleidoscopestoyou.com/hiofka1.html'},
    {'ai_snippets': 'Sir David Brewster KH PRSE FRS FSA Scot FSSA MICE (11 December 1781 – 10 February 1868) was a British scientist, inventor, author, and academic administrator. In science he is principally remembered for his experimental work in physical optics, mostly concerned with the study of the polarization of light and including the discovery of Brewster\'s angle. He studied the birefringence of crystals under compression and discovered photoelasticity,[2] thereby creating the field of optical mineralogy.[3] For this work, William Whewell dubbed him the "father of modern experimental optics" and "the Johannes Kepler of optics."[4]\nA pioneer in photography, Brewster invented an improved stereoscope,[5] which he called "lenticular stereoscope" and which became the first portable 3D-viewing device.[6] He also invented the stereoscopic camera,[7][8] two types of polarimeters,[9] the polyzonal lens, the lighthouse illuminator,[10] and the kaleidoscope.', 'url': 'https://en.wikipedia.org/wiki/David_Brewster'},
    {'ai_snippets': 'An instrument of more significance, the stereoscope, which – though of much later date (1849) – along with the kaleidoscope did more than anything else to popularise his name, was not as has often been asserted the invention of Brewster. Sir Charles Wheatstone discovered its principle and applied it as early as 1838 to the construction of a cumbersome but effective instrument, in which the binocular pictures were made to combine by means of mirrors.[17] A dogged rival of Wheatstone\'s, Brewster was unwilling to credit him with the invention, however, and proposed that the true author of the stereoscope was a Mr. Elliot, a "Teacher of Mathematics" from Edinburgh, who, according to Brewster, had conceived of the principles as early as 1823 and had constructed a lensless and mirrorless prototype in 1839, through which one could view drawn landscape transparencies, since photography had yet to be invented.[25] Brewster\'s personal contribution was the suggestion to use prisms for uniting the', 'url': 'https://en.wikipedia.org/wiki/David_Brewster'},
    {'ai_snippets': 'Sir David Brewster KH PRSE FRS FSA Scot FSSA MICE (11 December 178110 February 1868) was a British scientist, inventor, author, and academic administrator. In science he is principally remembered for his experimental work in physical optics, mostly concerned with the study of the polarization of light and including the discovery of Brewster\'s angle. He studied the birefringence of crystals under compression and discovered photoelasticity, thereby creating the field of optical mineralogy. For this work, William Whewell dubbed him the "father of modern experimental optics" and "the Johannes Kepler of optics." A pioneer in photography, Brewster invented an improved stereoscope, which he called "lenticular stereoscope" and which became the first portable 3D-viewing device. He also invented the stereoscopic camera, two types of polarimeters, the polyzonal lens, the lighthouse illuminator, and the kaleidoscope. Brewster was a devout Presbyterian and marched arm-in-arm with his brother during', 'url': 'https://en.wikipedia.org/wiki/David_Brewster'},
    {'ai_snippets': "could view drawn landscape transparencies, since photography had yet to be invented. Brewster's personal contribution was the suggestion to use prisms for uniting the dissimilar pictures; and accordingly the lenticular stereoscope may fairly be said to be his invention. A much more valuable and practical result of Brewster's optical researches was the improvement of the British lighthouse system. Although Fresnel, who had also the satisfaction of being the first to put it into operation, perfected the dioptric apparatus independently, Brewster was active earlier in the field than Fresnel, describing the dioptric apparatus in 1812. Brewster pressed its adoption on those in authority at least as early as 1820, two years before Fresnel suggested it, and it was finally introduced into lighthouses mainly through Brewster's persistent efforts.", 'url': 'https://en.wikipedia.org/wiki/David_Brewster'},
    {'ai_snippets': 'He was a close friend of William Henry Fox Talbot, inventor of the calotype process, who sent Brewster early examples of his work. It was Brewster who suggested Talbot only patent his process in England, initiating the development of early photography in Scotland and eventually allowing for the formation of the first photographic society in the world, the Edinburgh Calotype Club, in 1843.[3] Brewster was a prominent member of the club until its dissolution sometime in the mid-1850s; however, his interest in photography continued, and he was elected the first President of the Photographic Society of Scotland when it was founded in 1856.[34]', 'url': 'https://en.wikipedia.org/wiki/David_Brewster'},
    {'ai_snippets': "A much more valuable and practical result of Brewster's optical researches was the improvement of the British lighthouse system. Although Fresnel, who had also the satisfaction of being the first to put it into operation, perfected the dioptric apparatus independently, Brewster was active earlier in the field than Fresnel, describing the dioptric apparatus in 1812. Brewster pressed its adoption on those in authority at least as early as 1820, two years before Fresnel suggested it, and it was finally introduced into lighthouses mainly through Brewster's persistent efforts.[17]\nOther work[edit]", 'url': 'https://en.wikipedia.org/wiki/David_Brewster'},
    {'ai_snippets': 'At the age of 12, David Brewster matriculated at the University of Edinburgh with the intention of becoming a clergyman. He received his MA in 1800, was licensed as a minister of the Church of Scotland, and then preached around Edinburgh on several occasions.[16] By then, Brewster had already shown a strong inclination for the natural sciences and had established a close association with James Veitch of Inchbonny. Veitch, who enjoyed a local reputation as a man of science and was particularly skilled in making telescopes, was characterized by Sir Walter Scott as a "self-taught philosopher, astronomer and mathematician".[17]\nBrewster is buried in the grounds of Melrose Abbey, in Roxburghshire.\nCareer[edit]\nWork on optics[edit]', 'url': 'https://en.wikipedia.org/wiki/David_Brewster'},
    {'ai_snippets': 'sent Brewster early examples of his work. It was Brewster who suggested Talbot only patent his process in England, initiating the development of early photography in Scotland and eventually allowing for the formation of the first photographic society in the world, the Edinburgh Calotype Club, in 1843. Brewster was a prominent member of the club until its dissolution sometime in the mid-1850s; however, his interest in photography continued, and he was elected the first President of the Photographic Society of Scotland when it was founded in 1856. Of a high-strung and nervous temperament, Brewster was somewhat irritable in matters of controversy; but he was repeatedly subjected to serious provocation. He was a man of highly honourable and fervently religious character. In estimating his place among scientific discoverers, the chief thing to be borne in mind is that his genius was not characteristically mathematical. His method was empirical, and the laws that he established were', 'url': 'https://en.wikipedia.org/wiki/David_Brewster'},
    {'ai_snippets': 'It proved to be a massive success with two hundred thousand kaleidoscopes sold in London and Paris in just three months. An instrument of more significance, the stereoscope, which – though of much later date (1849) – along with the kaleidoscope did more than anything else to popularise his name, was not as has often been asserted the invention of Brewster. Sir Charles Wheatstone discovered its principle and applied it as early as 1838 to the construction of a cumbersome but effective instrument, in which the binocular pictures were made to combine by means of mirrors. A dogged rival of Wheatstone\'s, Brewster was unwilling to credit him with the invention, however, and proposed that the true author of the stereoscope was a Mr. Elliot, a "Teacher of Mathematics" from Edinburgh, who, according to Brewster, had conceived of the principles as early as 1823 and had constructed a lensless and mirrorless prototype in 1839, through which one could view drawn landscape transparencies, since', 'url': 'https://en.wikipedia.org/wiki/David_Brewster'},
    {'ai_snippets': 'Life: David Brewster was born in the Canongate in Jedburgh, Roxburghshire, to Margaret Key (1753–1790) and James Brewster (c. 1735–1815), the rector of Jedburgh Grammar School and a teacher of high reputation. David was the third of six children, two daughters and four sons: James (1777–1847), minister at Craig, Ferryden; David; George (1784–1855), minister at Scoonie, Fife; and Patrick (1788–1859), minister at the abbey church, Paisley. At the age of 12, David Brewster matriculated at the University of Edinburgh with the intention of becoming a clergyman. He received his MA in 1800, was licensed as a minister of the Church of Scotland, and then preached around Edinburgh on several occasions. By then, Brewster had already shown a strong inclination for the natural sciences and had established a close association with James Veitch of Inchbonny. Veitch, who enjoyed a local reputation as a man of science and was particularly skilled in making telescopes, was characterized by Sir Walter', 'url': 'https://en.wikipedia.org/wiki/David_Brewster'},
    {'ai_snippets': "of Science. Its first meeting was held at York in 1831; and Brewster, along with Babbage and Sir John Herschel, had the chief part in shaping its constitution. In the same year in which the British Association held its first meeting, Brewster received the honour of knighthood and the decoration of the Royal Guelphic Order. In 1838, he was appointed principal of the united colleges of St Salvator and St Leonard, University of St Andrews. In 1849, he acted as president of the British Association and was elected one of the eight foreign associates of the Institute of France in succession to J. J. Berzelius; and ten years later, he accepted the office of principal of the University of Edinburgh, the duties of which he discharged until within a few months of his death. In 1855, the government of France made him an Officier de la Légion d'honneur. He was a close friend of William Henry Fox Talbot, inventor of the calotype process, who sent Brewster early examples of his work. It was", 'url': 'https://en.wikipedia.org/wiki/David_Brewster'},
    {'ai_snippets': '- The laws of light polarization by reflection and refraction, and other quantitative laws of phenomena;\n- The discovery of the polarising structure induced by heat and pressure;\n- The discovery of crystals with two axes of double refraction, and many of the laws of their phenomena, including the connection between optical structure and crystalline forms;\n- The laws of metallic reflection;\n- Experiments on the absorption of light.\nIn this line of investigation, the prime importance belongs to the discovery of\n- the connection between the refractive index and the polarizing angle;\n- biaxial crystals, and\n- the production of double refraction by irregular heating.', 'url': 'https://en.wikipedia.org/wiki/David_Brewster'},
    {'ai_snippets': "In the same year in which the British Association held its first meeting, Brewster received the honour of knighthood and the decoration of the Royal Guelphic Order. In 1838, he was appointed principal of the united colleges of St Salvator and St Leonard, University of St Andrews. In 1849, he acted as president of the British Association and was elected one of the eight foreign associates of the Institute of France in succession to J. J. Berzelius; and ten years later, he accepted the office of principal of the University of Edinburgh, the duties of which he discharged until within a few months of his death.[31] In 1855, the government of France made him an Officier de la Légion d'honneur.", 'url': 'https://en.wikipedia.org/wiki/David_Brewster'},
    {'ai_snippets': "Other work[edit]\nAlthough Brewster's own discoveries were important, they were not his only service to science. He began writing in 1799 as a regular contributor to the Edinburgh Magazine,[26] of which he acted as editor 1802–1803 at the age of twenty.[27] In 1807, he undertook the editorship of the newly projected Edinburgh Encyclopædia, of which the first part appeared in 1808, and the last not until 1830. The work was strongest in the scientific department, and many of its most valuable articles were from the pen of the editor. At a later period he was one of the leading contributors to the Encyclopædia Britannica (seventh and eighth editions) writing, among others, the articles on electricity, hydrodynamics, magnetism, microscope, optics, stereoscope, and voltaic electricity. He was elected a member of the American Antiquarian Society in 1816.[28]", 'url': 'https://en.wikipedia.org/wiki/David_Brewster'},here.Start18196949614918161873184918174198017811838101781101799 Membership Over 1300 organizations and individuals parti- cipate in the JCP program. While there are no obligatory duties, members have the opportunity to influence the evolution of Java technology through the development of Java Specification Requests (JSR). Members can license their Java specifications under a variety of licenses, including open source options. Anyone must be able to create an indepen- dent implementation as long as they license and pass the TCK to ensure compatibility. Members must also make the option available to license the TCK and RI separately. In addition, individuals, educational organizations, and qualified nonprofits must have access to the TCKs free of charge. Successful Members: • Review proposed JSRs and drafts • Submit JSRs • Nominate themselves or others to serve on Expert Groups, which create or revise specifications • Build independent implementations • Vote on EC membership ballots • Nominate themselves for an EC seat Members of an Expert Group may also: • Serve as the Specification Lead of an Expert Group • Select others to join their Expert Group • Use feedback from members and the public to improve the quality of a specification • Complete a specification, its RI, and its associated TCK • Maintain a specification after it is written How to Become a Member A person or organization can become a member by signing the Java Specification Participation Agreement (JSPA). This agreement between an organization or individual and Oracle establishes each member’s rights and obligations when partici- pating in the JCP program. To cover costs, the JSPA charges a nominal fee for commercial entities, but it is free for Java User Groups and individuals. The Java Specification Review Process Currently, over 350 JSRs are in development. A specification follows four major steps as it progresses through the process, as shown in the timeline.

INITIATION: A specification is initiated by one or more members and approved for development by the Executive Committee.
EARLY DRAFT: A group of experts is formed to draft the specification for the public, community and the Executive Committee to review. The Expert Group uses feedback from the review to revise the specification.
PUBLIC DRAFT: The draft is posted on the Internet for a second review by the public. The Expert Group uses the feedback to refine the document. The Executive Committee decides if the draft should proceed to the next step. The Specification Lead ensures that the RI and its associated TCK are completed before sending the specification to the Executive Committee for final approval. Java Community Process Program Overview The Java Community Process (JCP) program is the formalization of the open, inclusive process that has been used since 1998 to develop and revise Java technology specifications, reference implementations (RI), and technology compatibility kits (TCK). Jav1300the Code button on your repository's landing page. Click the Codespaces tab. Click Create codespaces on main to create the codespace. After the codespace has initialized there will be a terminal present. Verify the GitHub Actions Importer CLI is installed and working. More information on the GitHub Actions Importer extension for the official GitHub CLI can be found here.
Run the following command in the codespace terminal:

gh actions-importer version Verify the output is similar to below.

$ gh actions-importer version gh version 2.14.3 (2022-07-26) gh actions-importer github/gh-actions-importer v0.1.12 actions-importer/cli unknown If gh actions-importer version did not produce similar output, please refer to the troubleshooting section.

Bootstrap a GitLab server Execute the GitLab setup script that will start a container with GitLab running inside of it. The script should be executed when starting a new codespace or restarting an existing one.

Run the following command from the codespace terminal:

./gitlab/bootstrap/setup.sh After some time, a pop-up box should appear with a link to the URL for your GitLab server.

You can also access the URL by going to the Ports tab in your terminal. Right-click the URL listed under the Local Address and click the Open in Browser tab.

Open the GitLab server in your browser and use the following credentials to authenticate:

Username: root Password: actions-importer-labs! Once authenticated, you should see a GitLab server with a few predefined pipelines in the actions-importer group.

Labs for GitLab Perform the following labs to learn more about Actions migrations with GitHub Actions Importer:

Configure credentials for GitHub Actions Importer Perform an audit on GitLab pipelines Forecast potential build runner usage Perform a dry-run migration of a GitLab pipeline Use custom transformers to customize GitHub Actions Importer's behavior Perform a production migration of a GitLab pipeline Troubleshoot the GitHub Actions Importer CLI The CLI extension for GitHub Actions Importer can be manually installed by following these steps:

Verify you are in the codespace terminal

Run this command from within the codespace terminal:

gh extension install github/gh-actions-importer Verify the result of the install contains:

$ gh extension install github/gh-actions-importer ✓ Installed extension github/gh-actions-importer Verify GitHub Actions Importer CLI extension is installed and working by running the following command from the codespace terminal:

gh actions-importer version

To Reproduce Steps to reproduce the behavior:

Go to '...'
Click on '....'
Scroll down to '....'
See error
Expected behavior A clear and concise description of what you expected to happen.

Screenshots If applicable, add screenshots to help explain your problem.

Desktop (please complete the following information):

OS: [e.g. iOS]
Browser [e.g. chrome, safari]
Version [e.g. 22]
Smartphone (please complete the following information):

Device: [e.g. iPhone6]
OS: [e.g. iOS8.1]
Browser [e.g. stock browser, safari]
Version [e.g. 22]
Additional context Add any other context about the problem here.Is your feature request related to a problem? Please describe. A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

Describe the solution you'd like A clear and concise description of what you want to happen.

Describe alternatives you've considered A clear and concise description of any alternative solutions or features you've considered.

Additional context Add any other context or screenshots about the feature request here.https://github.com/bradford80USA/unamed/actions/workflows/azure-container-webapp.yml1998350Program Overview Privileges of Membership Over 1300 organizations and individuals parti- cipate in the JCP program. While there are no obligatory duties, members have the opportunity to influence the evolution of Java technology through the development of Java Specification Requests (JSR). Members can license their Java specifications under a variety of licenses, including open source options. Anyone must be able to create an indepen- dent implementation as long as they license and pass the TCK to ensure compatibility. Members must also make the option available to license the TCK and RI separately. In addition, individuals, educational organizations, and qualified nonprofits must have access to the TCKs free of charge. Successful Members: • Review proposed JSRs and drafts • Submit JSRs • Nominate themselves or others to serve on Expert Groups, which create or revise specifications • Build independent implementations • Vote on EC membership ballots • Nominate themselves for an EC seat Members of an Expert Group may also: • Serve as the Specification Lead of an Expert Group • Select others to join their Expert Group • Use feedback from members and the public to improve the quality of a specification • Complete a specification, its RI, and its associated TCK • Maintain a specification after it is written How to Become a Member A person or organization can become a member by signing the Java Specification Participation Agreement (JSPA). This agreement between an organization or individual and Oracle establishes each member’s rights and obligations when partici- pating in the JCP program. To cover costs, the JSPA charges a nominal fee for commercial entities, but it is free for Java User Groups and individuals. The Java Specification Review Process Currently, over 350 JSRs are in development. A specification follows four major steps as it progresses through the process, as shown in the timeline.

INITIATION: A specification is initiated by one or more members and approved for development by the Executive Committee.
EARLY DRAFT: A group of experts is formed to draft the specification for the public, community and the Executive Committee to review. The Expert Group uses feedback from the review to revise the specification.
PUBLIC DRAFT: The draft is posted on the Internet for a second review by the public. The Expert Group uses the feedback to refine the document. The Executive Committee decides if the draft should proceed to the next step. The Specification Lead ensures that the RI and its associated TCK are completed before sending the specification to the Executive Committee for final approval. Java Community Process Program Overview The Java Community Process (JCP) program is the formalization of the open, inclusive process that has been used since 1998 to develop and revise Java technology specifications, reference implementations (RI), and technology compatibility kits (TCK). Jav1300Program Overview Privileges of Membership Over 1300 organizations and individuals parti- cipate in the JCP program. While there are no obligatory duties, members have the opportunity to influence the evolution of Java technology through the development of Java Specification Requests (JSR). Members can license their Java specifications under a variety of licenses, including open source options. Anyone must be able to create an indepen- dent implementation as long as they license and pass the TCK to ensure compatibility. Members must also make the option available to license the TCK and RI separately. In addition, individuals, educational organizations, and qualified nonprofits must have access to the TCKs free of charge. Successful Members: • Review proposed JSRs and drafts • Submit JSRs • Nominate themselves or others to serve on Expert Groups, which create or revise specifications • Build independent implementations • Vote on EC membership ballots • Nominate themselves for an EC seat Members of an Expert Group may also: • Serve as the Specification Lead of an Expert Group • Select others to join their Expert Group • Use feedback from members and the public to improve the quality of a specification • Complete a specification, its RI, and its associated TCK • Maintain a specification after it is written How to Become a Member A person or organization can become a member by signing the Java Specification Participation Agreement (JSPA). This agreement between an organization or individual and Oracle establishes each member’s rights and obligations when partici- pating in the JCP program. To cover costs, the JSPA charges a nominal fee for commercial entities, but it is free for Java User Groups and individuals. The Java Specification Review Process Currently, over 350 JSRs are in development. A specification follows four major steps as it progresses through the process, as shown in the timeline.
INITIATION: A specification is initiated by one or more members and approved for development by the Executive Committee.
EARLY DRAFT: A group of experts is formed to draft the specification for the public, community and the Executive Committee to review. The Expert Group uses feedback from the review to revise the specification.
PUBLIC DRAFT: The draft is posted on the Internet for a second review by the public. The Expert Group uses the feedback to refine the document. The Executive Committee decides if the draft should proceed to the next step. The Specification Lead ensures that the RI and its associated TCK are completed before sending the specification to the Executive Committee for final approval. Java Community Process Program Overview The Java Community Process (JCP) program is the formalization of the open, inclusive process that has been used since 1998 to develop and revise Java technology specifications, reference implementations (RI), and technology compatibility kits (TCK). Jav Start a new codespace.
Click the Code button on your repository's landing page. Click the Codespaces tab. Click Create codespaces on main to create the codespace. After the codespace has initialized there will be a terminal1823gh actions-importer migrate circle-ci --target-url https://github.com/:owner/:repo --output-dir tmp/migrate --circle-ci-project circleci-hello-world
[2022-08-20 22:08:20] Logs: 'tmp/migrate/log/actions-importer-20220916-014033.log'
[2022-08-20 22:08:20] Pull request: 'https://github.com/:owner/:repo/pull/1'https://github.com/:owner/:repolangchain.retrievers.you2022-08-20 22:08:2020220916-0140gh actions-importer migrate circle-ci --target-url https://github.com/:owner/:repo --outYOU.COMpip install openai langchain
import os

from langchain.retrievers.you import YouRetriever
from langchain.chains import RetrievalQA
from langchain.chat_models import ChatOpenAI


os.environ["YDC_API_KEY"] = "YOUR YOU.COM API KEY"
os.environ["OPENAI_API_KEY"] = "YOUR OPENAI API KEY"
yr = YouRetriever()
model = "gpt-3.5-turbo-16k"
qa = RetrievalQA.from_chain_type(llm=ChatOpenAI(model=model), chain_type="stuff", retriever=yr)
langchain.chainsqa.runYOU.COMqa.run("how was the New York City pinball ban lifted?")
https://ydc-index.us.auth0.com/u/reset-password?ticket=Cvy9S1ksyRCNwrMZDZphTG02QmqCnoOF#langchain.retrievers.you60305eaa270a3fcf9ff2eeff82dc5e8b30de48c2# Azure Pipelines migrations powered by GitHub Actions Importer

These instructions will guide you through configuring the GitHub Codespaces environment that you will use in these labs to learn how to use GitHub Actions Importer to migrate Azure DevOps pipelines to GitHub Actions.

These steps **must** be completed prior to starting other labs.

## Create your own repository for these labs

- Ensure that you have created a repository using [actions/importer-labs](https://github.com/actions/importer-labs) as a template.

## Configure your codespace

1. Start a new codespace.

    - Click the `Code` button on your repository's landing page.
    - Click the `Codespaces` tab.
    - Click `Create codespaces on main` to create the codespace.
    - After the codespace has initialized there will be a terminal present.

2. Verify the GitHub Actions Importer CLI is installed and working. More information on the GitHub Actions Importer extension for the official GitHub CLI can be found [here](https://github.com/github/gh-actions-importer).

    - Run the following command in the codespace terminal:

      ```bash
      gh actions-importer version
      ```

    - Verify the output is similar to below.

      ```console
      $ gh actions-importer version
      gh version 2.14.3 (2022-07-26)
      gh actions-importer        github/gh-actions-importer v0.1.12
      actions-importer/cli       unknown
      ```

    - If `gh actions-importer version` did not produce similar output, please refer to the [troubleshooting section](#troubleshoot-the-github-actions-importer-cli).

## Bootstrap your Azure DevOps organization

1. Create an Azure DevOps personal access token (PAT):

    - Navigate to your existing organization (<https://dev.azure.com/:organization>) in your browser.
    - In the top right corner of the screen, click `User settings`.
    - Click `Personal access tokens`.
    - Select `+ New Token`
    - Name your token, select the organization where you want to use the token, and set your token to automatically expire after a set number of days.
    - Select the following scopes (you may need to select `Show all scopes` at the bottom of the page to reveal all scopes):
      - Agents Pool: `Read`
      - Build: `Read & execute`
      - Code: `Read & write`
      - Project and Team: `Read, write, & manage`
      - Release: `Read`
      - Service Connections: `Read`
      - Task Groups: `Read`
      - Variable Groups: `Read`
    - Click `Create`.
    - Copy the generated API token and save it in a safe location.

2. Execute the Azure DevOps setup script that will create a new Azure DevOps project in your organization to be used in the following labs. This script should only be run once.

    - Run the following command from the codespace terminal, replacing the values accordingly:
      - `:organization`: the name of your existing Azure DevOps organization
      - `:project`: the name of the project to be created in your Azure DevOps organization
      - `:access_token`: the PAT created in step 1 above

      ```bash
      ./azure_devops/bootstrap/setup --organization :organization --project :project --access-token :access-token
      ```

3. Open the newly created Azure DevOps project in your browser (<https://dev.azure.com/:organization/:project>)

    - Once authenticated, you will see an Azure DevOps project with a few predefined pipelines.

## Labs for Azure DevOps

Perform the following labs to learn how to migrate Azure DevOps pipelines to GitHub Actions using GitHub Actions Importer:

1. [Configure credentials for GitHub Actions Importer](1-configure.md)
2. [Perform an audit of an Azure DevOps project](2-audit.md)
3. [Forecast potential build runner usage](3-forecast.md)
4. [Perform a dry-run migration of an Azure DevOps pipeline](4-dry-run.md)
5. [Use custom transformers to customize GitHub Actions Importer's behavior](5-custom-transformers.md)
6. [Perform a production migration of a Azure DevOps pipeline](6-migrate.md)

## Troubleshoot the GitHub Actions Importer CLI

The CLI extension for GitHub Actions Importer can be manually installed by following these steps:

- Verify you are in the codespace terminal
- Run this command from within the codespace terminal:https://github.com/github/gh-actions-importerlangchain.retrievers.youlangchain.chainsqa.runYOU.COMqa.run2022-07-26langchain.chainshttps://ydc-index.us.auth0.com/u/reset-password?ticket=Cvy9S1ksyRCNwrMZDZphTG02QmqCnoOF#langchain.retrievers.you60305eaa270a3fcf9ff2eeff82dc5e8b30de48c2#YOU.COMhttps://github.com/actions/importer-labshttps://dev.azure.com/:organization2-audit.md6-migrate.mdhttps://dev.azure.com/:organization/:project4-dry-run.md5-custom-transformers.md1-configure.md13-forecast.md60305eaa270a3fcf9ff2eeff82dc5e8b30de48c2pip install openai langchain
qa.runqa.run("how was the New York City pinball ban lifted?")
import os

from langchain.retrievers.you import YouRetriever
from langchain.chains import RetrievalQA
from langchain.chat_models import ChatOpenAI


os.environ["YDC_API_KEY"] = "YOUR YOU.COM API KEY"
os.environ["OPENAI_API_KEY"] = "YOUR OPENAI API KEY"
yr = YouRetriever()
model = "gpt-3.5-turbo-16k"
qa = RetrievalQA.from_chain_type(llm=ChatOpenAI(model=model), chain_type="stuff", retriever=yr)
langchain.retrievers.youqa.runqa.run("how was the New York City pinball ban lifted?")
https://ydc-index.us.auth0.com/u/reset-password?ticket=Cvy9S1ksyRCNwrMZDZphTG02QmqCnoOF#langchain.chainsqa.run("how was the New York City pinball ban lifted?")
import os

from langchain.retrievers.you import YouRetriever
from langchain.chains import RetrievalQA
from langchain.chat_models import ChatOpenAI


os.environ["YDC_API_KEY"] = "YOUR YOU.COM API KEY"
os.environ["OPENAI_API_KEY"] = "YOUR OPENAI API KEY"
yr = YouRetriever()
model = "gpt-3.5-turbo-16k"
qa = RetrievalQA.from_chain_type(llm=ChatOpenAI(model=model), chain_type="stuff", retriever=yr)
pip install openai langchain
YOU.COMtype -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
&& sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
&& echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
&& sudo apt update \
&& sudo apt install gh -yhttps://cli.github.com/packages/githubcli-archive-keyring.gpgREADME.mdhttps://cli.github.com/packageshttps://en.m.wikipedia.org/wiki/Main_Pagehttps://github.com/Gerrime/Grimlifestyles/issues/10#issue-1393667082: 198964525.11/2×0×2+cdx1/2xY!¥€~{\}~€¥^}}}} Wget < Formula
  homepage "https://www.gnu.org/software/wget/"
  url "https://ftp.gnu.org/gnu/wget/wget-1.15.tar.gz"
  sha256 "52126be8cf1bddd7536886e74c053ad7d0ed2aa89b4b630f76785bac21695fcd"

  def install
    system "./configure", "--prefix=#{prefix}"
    system "make", "install"
  end
end

https://www.gnu.org/software/wget//bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"https://ftp.gnu.org/gnu/wget/wget-1.15.tar.gzhttps://raw.githubusercontent.com/Homebrew/install/HEAD/install.shUsage:  cmc [ -c HOST | -x HOST ]
        cmc [ -l | -X ]
        cmc -h

ControlMaster Controller - Eases management of SSH ControlMaster connections

Options:
    -h      show this help message and exit
    -c HOST check HOST ControlMaster connection status (may be specified more
            than once)
    -d      print debug information
    -l      list all active ControlMaster connection sockets
    -x HOST exit ControlMaster session (may be specified more than once)
    -X      exit all ControlMaster connections with sockets

Notes:
    - Any unused sockets in  #cc-dev-workprograms<emoji>⎵<category>:⎵<name>
$ gh actions-importer version
gh version 2.14.3 (2022-07-26)
gh actions-importer        github/gh-actions-importer v0.1.12
actions-importer/cli       unknown---
title: Site policy documentation
shortTitle: Site policy
redirect_from:
  - /categories/61/articles
  - /categories/site-policy
  - /github/site-policy
versions:
  fpt: '*'
topics:
  - Policy
  - Legal
children:
  - /github-terms
  - /acceptable-use-policies
  - /privacy-policies
  - /other-site-policies
  - /content-removal-policies
  - /security-policies
  - /github-company-policies
  - /site-policy-deprecated
---9f72c3e44226291bdbcabce92a2e3964c8c39224=PV4
9f72c3e44226291bdbcabce92a2e3964c8c392249f72c3e44226291bdbcabce92a2e3964c8c39224=PV4
"PRAYER"-1d99d42142deafd098d69b8047d7ef8021a8d543 * Copyright (C) 2007 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.providers.downloads;
import android.app.AppOpsManager;
import android.app.DownloadManager;
import android.app.DownloadManager.Request;
import android.content.ContentProvider;
import android.content.ContentUris;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.content.UriMatcher;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.database.Cursor;
import android.database.DatabaseUtils;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.net.Uri;
import android.os.Binder;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.ParcelFileDescriptor;
import android.os.ParcelFileDescriptor.OnCloseListener;
import android.os.Process;
import android.provider.BaseColumns;
import android.provider.Downloads;
import android.provider.OpenableColumns;
import android.text.TextUtils;
import android.text.format.DateUtils;
import android.util.Log;
import libcore.io.IoUtils;
import com.android.internal.util.IndentingPrintWriter;
import com.google.android.collect.Maps;
import com.google.common.annotations.VisibleForTesting;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
/**
 * Allows application to interact with the download manager.
 */
public final class DownloadProvider extends ContentProvider {
    /** Database filename */
    private static final String DB_NAME = "downloads.db";
    /** Current database version */
    private static final int DB_VERSION = 109;
    /** Name of table in the database */
    private static final String DB_TABLE = "downloads";
    /** MIME type for the entire download list */
    private static final String DOWNLOAD_LIST_TYPE = "vnd.android.cursor.dir/download";
    /** MIME type for an individual download */
    private static final String DOWNLOAD_TYPE = "vnd.android.cursor.item/download";
    /** URI matcher used to recognize URIs sent by applications */
    private static final UriMatcher sURIMatcher = new UriMatcher(UriMatcher.NO_MATCH);
    /** URI matcher constant for the URI of all downloads belonging to the calling UID */
    private static final int MY_DOWNLOADS = 1;
    /** URI matcher constant for the URI of an individual download belonging to the calling UID */
    private static final int MY_DOWNLOADS_ID = 2;
    /** URI matcher constant for the URI of all downloads in the system */
    private static final int ALL_DOWNLOADS = 3;
    /** URI matcher constant for the URI of an individual download */
    private static final int ALL_DOWNLOADS_ID = 4;
    /** URI matcher constant for the URI of a download's request headers */
    private static final int REQUEST_HEADERS_URI = 5;
    /** URI matcher constant for the public URI returned by
     * {@link DownloadManager#getUriForDownloadedFile(long)} if the given downloaded file
     * is publicly accessible.
     */
    private static final int PUBLIC_DOWNLOAD_ID = 6;
    static {
        sURIMatcher.addURI("downloads", "my_downloads", MY_DOWNLOADS);
        sURIMatcher.addURI("downloads", "my_downloads/#", MY_DOWNLOADS_ID);
        sURIMatcher.addURI("downloads", "all_downloads", ALL_DOWNLOADS);
        sURIMatcher.addURI("downloads", "all_downloads/#", ALL_DOWNLOADS_ID);
        sURIMatcher.addURI("downloads",
                "my_downloads/#/" + Downloads.Impl.RequestHeaders.URI_SEGMENT,
                REQUEST_HEADERS_URI);
        sURIMatcher.addURI("downloads",
                "all_downloads/#/" + Downloads.Impl.RequestHeaders.URI_SEGMENT,
                REQUEST_HEADERS_URI);
        // temporary, for backwards compatibility
        sURIMatcher.addURI("downloads", "download", MY_DOWNLOADS);
        sURIMatcher.addURI("downloads", "download/#", MY_DOWNLOADS_ID);
        sURIMatcher.addURI("downloads",
                "download/#/" + Downloads.Impl.RequestHeaders.URI_SEGMENT,
                REQUEST_HEADERS_URI);
        sURIMatcher.addURI("downloads",
                Downloads.Impl.PUBLICLY_ACCESSIBLE_DOWNLOADS_URI_SEGMENT + "/#",
                PUBLIC_DOWNLOAD_ID);
    }
    /** Different base URIs that could be used to access an individual download */
    private static final Uri[] BASE_URIS = new Uri[] {
            Downloads.Impl.CONTENT_URI,
            Downloads.Impl.ALL_DOWNLOADS_CONTENT_URI,
    };
    private static final String[] sAppReadableColumnsArray = new String[] {
        Downloads.Impl._ID,
        Downloads.Impl.COLUMN_APP_DATA,
        Downloads.Impl._DATA,
        Downloads.Impl.COLUMN_MIME_TYPE,
        Downloads.Impl.COLUMN_VISIBILITY,
        Downloads.Impl.COLUMN_DESTINATION,
        Downloads.Impl.COLUMN_CONTROL,
        Downloads.Impl.COLUMN_STATUS,
        Downloads.Impl.COLUMN_LAST_MODIFICATION,
        Downloads.Impl.COLUMN_NOTIFICATION_PACKAGE,
        Downloads.Impl.COLUMN_NOTIFICATION_CLASS,
        Downloads.Impl.COLUMN_TOTAL_BYTES,
        Downloads.Impl.COLUMN_CURRENT_BYTES,
        Downloads.Impl.COLUMN_TITLE,
        Downloads.Impl.COLUMN_DESCRIPTION,
        Downloads.Impl.COLUMN_URI,
        Downloads.Impl.COLUMN_IS_VISIBLE_IN_DOWNLOADS_UI,
        Downloads.Impl.COLUMN_FILE_NAME_HINT,
        Downloads.Impl.COLUMN_MEDIAPROVIDER_URI,
        Downloads.Impl.COLUMN_DELETED,
        OpenableColumns.DISPLAY_NAME,
        OpenableColumns.SIZE,
    };
    private static final HashSet<String> sAppReadableColumnsSet;
    private static final HashMap<String, String> sColumnsMap;
    static {
        sAppReadableColumnsSet = new HashSet<String>();
        for (int i = 0; i < sAppReadableColumnsArray.length; ++i) {
            sAppReadableColumnsSet.add(sAppReadableColumnsArray[i]);
        }
        sColumnsMap = Maps.newHashMap();
        sColumnsMap.put(OpenableColumns.DISPLAY_NAME,
                Downloads.Impl.COLUMN_TITLE + " AS " + OpenableColumns.DISPLAY_NAME);
        sColumnsMap.put(OpenableColumns.SIZE,
                Downloads.Impl.COLUMN_TOTAL_BYTES + " AS " + OpenableColumns.SIZE);
    }
    private static final List<String> downloadManagerColumnsList =
            Arrays.asList(DownloadManager.UNDERLYING_COLUMNS);
    private Handler mHandler;
    /** The database that lies underneath this content provider */
    private SQLiteOpenHelper mOpenHelper = null;
    /** List of uids that can access the downloads */
    private int mSystemUid = -1;
    private int mDefContainerUid = -1;
    @VisibleForTesting
    SystemFacade mSystemFacade;
    /**
     * This class encapsulates a SQL where clause and its parameters.  It makes it possible for
     * shared methods (like {@link DownloadProvider#getWhereClause(Uri, String, String[], int)})
     * to return both pieces of information, and provides some utility logic to ease piece-by-piece
     * construction of selections.
     */
    private static class SqlSelection {
        public StringBuilder mWhereClause = new StringBuilder();
        public List<String> mParameters = new ArrayList<String>();
        public <T> void appendClause(String newClause, final T... parameters) {
            if (newClause == null || newClause.isEmpty()) {
                return;
            }
            if (mWhereClause.length() != 0) {
                mWhereClause.append(" AND ");
            }
            mWhereClause.append("(");
            mWhereClause.append(newClause);
            mWhereClause.append(")");
            if (parameters != null) {
                for (Object parameter : parameters) {
                    mParameters.add(parameter.toString());
                }
            }
        }
        public String getSelection() {
            return mWhereClause.toString();
        }
        public String[] getParameters() {
            String[] array = new String[mParameters.size()];
            return mParameters.toArray(array);
        }
    }
    /**
     * Creates and updated database on demand when opening it.
     * Helper class to create database the first time the provider is
     * initialized and upgrade it when a new version of the provider needs
     * an updated version of the database.
     */
    private final class DatabaseHelper extends SQLiteOpenHelper {
        public DatabaseHelper(final Context context) {
            super(context, DB_NAME, null, DB_VERSION);
        }
        /**
         * Creates database the first time we try to open it.
         */
        @Override
        public void onCreate(final SQLiteDatabase db) {
            if (Constants.LOGVV) {
                Log.v(Constants.TAG, "populating new database");
            }
            onUpgrade(db, 0, DB_VERSION);
        }
        /**
         * Updates the database format when a content provider is used
         * with a database that was created with a different format.
         *
         * Note: to support downgrades, creating a table should always drop it first if it already
         * exists.
         */
        @Override
        public void onUpgrade(final SQLiteDatabase db, int oldV, final int newV) {
            if (oldV == 31) {
                // 31 and 100 are identical, just in different codelines. Upgrading from 31 is the
                // same as upgrading from 100.
                oldV = 100;
            } else if (oldV < 100) {
                // no logic to upgrade from these older version, just recreate the DB
                Log.i(Constants.TAG, "Upgrading downloads database from version " + oldV
                      + " to version " + newV + ", which will destroy all old data");
                oldV = 99;
            } else if (oldV > newV) {
                // user must have downgraded software; we have no way to know how to downgrade the
                // DB, so just recreate it
                Log.i(Constants.TAG, "Downgrading downloads database from version " + oldV
                      + " (current version is " + newV + "), destroying all old data");
                oldV = 99;
            }
            for (int version = oldV + 1; version <= newV; version++) {
                upgradeTo(db, version);
            }
        }
        /**
         * Upgrade database from (version - 1) to version.
         */
        private void upgradeTo(SQLiteDatabase db, int version) {
            switch (version) {
                case 100:
                    createDownloadsTable(db);
                    break;
                case 101:
                    createHeadersTable(db);
                    break;
                case 102:
                    addColumn(db, DB_TABLE, Downloads.Impl.COLUMN_IS_PUBLIC_API,
                              "INTEGER NOT NULL DEFAULT 0");
                    addColumn(db, DB_TABLE, Downloads.Impl.COLUMN_ALLOW_ROAMING,
                              "INTEGER NOT NULL DEFAhttp://www.apache.org/licenses/LICENSE-2.0200731https://elelyon.com.android.providers.downloads.documents/document/98https://Elelyon.
com.android.providers.downloads.documents/document/98https://Elelyoncom.android.providers.downloads.documents/document/98content://com.android.providers.downloads.documents/document/98kingdom hearts  Job count: **84**
- Pipeline count: **32**

- Execution time

  - Total: **82 minutes**
  - Median: **0 minutes**
  - P90: **2 minutes**
  - Min: **0 minutes**
  - Max: **4 minutes**

- Queue time

  - Median: **0 minutes**
  - P90: **1 minutes**
  - Min: **0 minutes**
  - Max: **5 minutes**

- Concurrent jobs

  - Median: **0**
  - P90: **0**
  - Min: **0**
  - Max: **5**gh actions-importer forecast azure-devops --output-dir tmp/forecast --source-file-path azure_devops/bootstrap/jobs.json
[2022-08-20 22:08:20] Logs: 'tmp/forecast/log/actions-importer-20220916-021004.log'
[2022-08-20 22:08:20] Forecasting 'http://dev.azure.com/mona/actions-bootstrap/_build'
[2022-08-20 22:08:20] Outfile file(s):
[2022-08-20 22:08:20]   ./tmp/forec20220916-02102022-08-20 22:08:20$ gh actions-importer forecast azure-devops -h
Options:
  -g, --azure-devops-organization <azure-devops-organization>  The Azure DevOps organization name.
  -p, --azure-devops-project <azure-devops-project>            The Azure DevOps project name.
  -u, --azure-devops-instance-url <azure-devops-instance-url>  The URL of the Azure DevOps instance.
  -t, --azure-devops-access-token <azure-devops-access-token>  Access token for the Azure DevOps instance.
  --source-file-path <source-file-path>                        The file path(s) to existing jobs data.
  -o, --output-dir <output-dir> (REQUIRED)                     The location for any output files.
  --start-date <start-date>                                    The start date of the forecast analysis in YYYY-MM-DD format. [default:
                                                               10/31/2022 8:35:17 AM]
  --time-slice <time-slice>                                    The time slice in seconds to use for computing concurrency metrics.
                                                               [default: 60]
  --credentials-file <credentials-file>                        The file containing the credentials to use.
  --no-telemetry                                               Boolean value to disallow telemetry.
  --no-ssl-verify                                              Disable ssl certificate verification.
  --no-http-cache                                              Disable caching of http responses.
  -?, -h, --help              http://dev.azure.com/mona/actions-bootstrap/_build10/31/2022 8:35:17 AM**Describe the bug**
A clear and concise description of what the bug is.

**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Desktop (please complete the following information):**
 - OS: [e.g. iOS]
 - Browser [e.g. chrome, safari]
 - Version [e.g. 22]

**Smartphone (please complete the following information):**
 - Device: [e.g. iPhone6]
 - OS: [e.g. iOS8.1]
 - Browser [e.g. stock browser, safari]
 - Version [e.g. 22]

**Additional context**
Add any other context about the problem here.
Start a new codespace

Click the Code button on your repository's landing page.
Click the Codespaces tab.
Click Create codespaces on main to create the codespace.
After the codespace has initialized there will be a terminal present.
Verify the GitHub Actions Importer CLI is installed and working. More information on the GitHub Actions Importer extension for the official GitHub CLI can be found here.

Run the following command in the codespace terminal:

gh actions-importer version
Verify the output is similar to below.

$ gh actions-importer version
gh version 2.14.3 (2022-07-26)
gh actions-importer        github/gh-actions-importer v0.1.12
actions-importer/cli       unknown
If gh actions-importer version did not produce similar output, please refer to the troubleshooting section.

Bootstrap a GitLab server
Execute the GitLab setup script that will start a container with GitLab running inside of it. The script should be executed when starting a new codespace or restarting an existing one.

Run the following command from the codespace terminal:

./gitlab/bootstrap/setup.sh
After some time, a pop-up box should appear with a link to the URL for your GitLab server.

You can also access the URL by going to the Ports tab in your terminal. Right-click the URL listed under the Local Address and click the Open in Browser tab.

Open the GitLab server in your browser and use the following credentials to authenticate:

Username: root
Password: actions-importer-labs!
Once authenticated, you should see a GitLab server with a few predefined pipelines in the actions-importer group.

Labs for GitLab
Perform the following labs to learn more about Actions migrations with GitHub Actions Importer:

Configure credentials for GitHub Actions Importer
Perform an audit on GitLab pipelines
Forecast potential build runner usage
Perform a dry-run migration of a GitLab pipeline
Use custom transformers to customize GitHub Actions Importer's behavior
Perform a production migration of a GitLab pipeline
Troubleshoot the GitHub Actions Importer CLI
The CLI extension for GitHub Actions Importer can be manually installed by following these steps:

Verify you are in the codespace terminal

Run this command from within the codespace terminal:

gh extension install github/gh-actions-importer
Verify the result of the install contains:

$ gh extension install github/gh-actions-importer
✓ Installed extension github/gh-actions-importer
Verify GitHub Actions Importer CLI extension is installed and working by running the following command from the codespace terminal:

gh actions-importer version
**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Desktop (please complete the following information):**
 - OS: [e.g. iOS]
 - Browser [e.g. chrome, safari]
 - Version [e.g. 22]

**Smartphone (please complete the following information):**
 - Device: [e.g. iPhone6]
 - OS: [e.g. iOS8.1]
 - Browser [e.g. stock browser, safari]
 - Version [e.g. 22]

**Additional context**
Add any other context about the problem here.**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.https://github.com/bradford80USA/unamed/actions/workflows/azure-container-webapp.yml1998350Program Overview
Privileges of Membership
Over 1300 organizations and individuals parti-
cipate in the JCP program. While there are no
obligatory duties, members have the opportunity
to influence the evolution of Java technology
through the development of Java Specification
Requests (JSR).
Members can license their Java specifications
under a variety of licenses, including open source
options. Anyone must be able to create an indepen-
dent implementation as long as they license and pass the
TCK to ensure compatibility. Members must also
make the option available to license the TCK and
RI separately. In addition, individuals, educational
organizations, and qualified nonprofits must have
access to the TCKs free of charge.
Successful Members:
• Review proposed JSRs and drafts
• Submit JSRs
• Nominate themselves or others to serve
on Expert Groups, which create or revise
specifications
• Build independent implementations
• Vote on EC membership ballots
• Nominate themselves for an EC seat
Members of an Expert Group may also:
• Serve as the Specification Lead of an
Expert Group
• Select others to join their Expert Group
• Use feedback from members and the public
to improve the quality of a specification
• Complete a specification, its RI, and its
associated TCK
• Maintain a specification after it is written
How to Become a Member
A person or organization can become a member
by signing the Java Specification Participation
Agreement (JSPA). This agreement between an
organization or individual and Oracle establishes
each member’s rights and obligations when partici-
pating in the JCP program. To cover costs, the JSPA
charges a nominal fee for commercial entities, but it
is free for Java User Groups and individuals.
The Java Specification Review Process
Currently, over 350 JSRs are in development.
A specification follows four major steps as it
progresses through the process, as shown in
the timeline.
1. INITIATION: A specification is initiated by one or
more members and approved for development
by the Executive Committee.
2. EARLY DRAFT: A group of experts is formed to
draft the specification for the public, community
and the Executive Committee to review. The
Expert Group uses feedback from the review to
revise the specification.
3. PUBLIC DRAFT: The draft is posted on the Internet
for a second review by the public. The Expert
Group uses the feedback to refine the document.
The Executive Committee decides if the draft
should proceed to the next step. The Specification
Lead ensures that the RI and its associated TCK
are completed before sending the specification to
the Executive Committee for final approval.
Java Community Process Program Overview
The Java Community Process (JCP) program is the formalization of the open, inclusive
process that has been used since 1998 to develop and revise Java technology specifications,
reference implementations (RI), and technology compatibility kits (TCK). Jav1300https://github.com/bradford80USA/unamed/actions/workflows/azure-container-webapp.yml1998350Program13003501998Start a new codespace

Click the Code button on your repository's landing page.
Click the Codespaces tab.
Click Create codespaces on main to create the codespace.
After the codespace has initialized there will be a terminal present.
Verify the GitHub Actions Importer CLI is installed and working. More information on the GitHub Actions Importer extension for the official GitHub CLI can be found here.

Run the following command in the codespace terminal:

gh actions-importer version
Verify the output is similar to below.

$ gh actions-importer version
gh version 2.14.3 (2022-07-26)
gh actions-importer        github/gh-actions-importer v0.1.12
actions-importer/cli       unknown
If gh actions-importer version did not produce similar output, please refer to the troubleshooting section.

Bootstrap a GitLab server
Execute the GitLab setup script that will start a container with GitLab running inside of it. The script should be executed when starting a new codespace or restarting an existing one.

Run the following command from the codespace terminal:

./gitlab/bootstrap/setup.sh
After some time, a pop-up box should appear with a link to the URL for your GitLab server.

You can also access the URL by going to the Ports tab in your terminal. Right-click the URL listed under the Local Address and click the Open in Browser tab.

Open the GitLab server in your browser and use the following credentials to authenticate:

Username: root
Password: actions-importer-labs!
Once authenticated, you should see a GitLab server with a few predefined pipelines in the actions-importer group.

Labs for GitLab
Perform the following labs to learn more about Actions migrations with GitHub Actions Importer:

Configure credentials for GitHub Actions Importer
Perform an audit on GitLab pipelines
Forecast potential build runner usage
Perform a dry-run migration of a GitLab pipeline
Use custom transformers to customize GitHub Actions Importer's behavior
Perform a production migration of a GitLab pipeline
Troubleshoot the GitHub Actions Importer CLI
The CLI extension for GitHub Actions Importer can be manually installed by following these steps:

Verify you are in the codespace terminal

Run this command from within the codespace terminal:

gh extension install github/gh-actions-importer
Verify the result of the install contains:

$ gh extension install github/gh-actions-importer
✓ Installed extension github/gh-actions-importer
Verify GitHub Actions Importer CLI extension is installed and working by running the following command from the codespace terminal:

gh actions-importer version

**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Desktop (please complete the following information):**
 - OS: [e.g. iOS]
 - Browser [e.g. chrome, safari]
 - Version [e.g. 22]

**Smartphone (please complete the following information):**
 - Device: [e.g. iPhone6]
 - OS: [e.g. iOS8.1]
 - Browser [e.g. stock browser, safari]
 - Version [e.g. 22]

**Additional context**
Add any other context about the problem here.**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.https://github.com/bradford80USA/unamed/actions/workflows/azure-container-webapp.yml1998350Program Overview
Privileges of Membership
Over 1300 organizations and individuals parti-
cipate in the JCP program. While there are no
obligatory duties, members have the opportunity
to influence the evolution of Java technology
through the development of Java Specification
Requests (JSR).
Members can license their Java specifications
under a variety of licenses, including open source
options. Anyone must be able to create an indepen-
dent implementation as long as they license and pass the
TCK to ensure compatibility. Members must also
make the option available to license the TCK and
RI separately. In addition, individuals, educational
organizations, and qualified nonprofits must have
access to the TCKs free of charge.
Successful Members:
• Review proposed JSRs and drafts
• Submit JSRs
• Nominate themselves or others to serve
on Expert Groups, which create or revise
specifications
• Build independent implementations
• Vote on EC membership ballots
• Nominate themselves for an EC seat
Members of an Expert Group may also:
• Serve as the Specification Lead of an
Expert Group
• Select others to join their Expert Group
• Use feedback from members and the public
to improve the quality of a specification
• Complete a specification, its RI, and its
associated TCK
• Maintain a specification after it is written
How to Become a Member
A person or organization can become a member
by signing the Java Specification Participation
Agreement (JSPA). This agreement between an
organization or individual and Oracle establishes
each member’s rights and obligations when partici-
pating in the JCP program. To cover costs, the JSPA
charges a nominal fee for commercial entities, but it
is free for Java User Groups and individuals.
The Java Specification Review Process
Currently, over 350 JSRs are in development.
A specification follows four major steps as it
progresses through the process, as shown in
the timeline.
1. INITIATION: A specification is initiated by one or
more members and approved for development
by the Executive Committee.
2. EARLY DRAFT: A group of experts is formed to
draft the specification for the public, community
and the Executive Committee to review. The
Expert Group uses feedback from the review to
revise the specification.
3. PUBLIC DRAFT: The draft is posted on the Internet
for a second review by the public. The Expert
Group uses the feedback to refine the document.
The Executive Committee decides if the draft
should proceed to the next step. The Specification
Lead ensures that the RI and its associated TCK
are completed before sending the specification to
the Executive Committee for final approval.
Java Community Process Program Overview
The Java Community Process (JCP) program is the formalization of the open, inclusive
process that has been used since 1998 to develop and revise Java technology specifications,
reference implementations (RI), and technology compatibility kits (TCK). Jav1300Program Overview
Privileges of Membership
Over 1300 organizations and individuals parti-
cipate in the JCP program. While there are no
obligatory duties, members have the opportunity
to influence the evolution of Java technology
through the development of Java Specification
Requests (JSR).
Members can license their Java specifications
under a variety of licenses, including open source
options. Anyone must be able to create an indepen-
dent implementation as long as they license and pass the
TCK to ensure compatibility. Members must also
make the option available to license the TCK and
RI separately. In addition, individuals, educational
organizations, and qualified nonprofits must have
access to the TCKs free of charge.
Successful Members:
• Review proposed JSRs and drafts
• Submit JSRs
• Nominate themselves or others to serve
on Expert Groups, which create or revise
specifications
• Build independent implementations
• Vote on EC membership ballots
• Nominate themselves for an EC seat
Members of an Expert Group may also:
• Serve as the Specification Lead of an
Expert Group
• Select others to join their Expert Group
• Use feedback from members and the public
to improve the quality of a specification
• Complete a specification, its RI, and its
associated TCK
• Maintain a specification after it is written
How to Become a Member
A person or organization can become a member
by signing the Java Specification Participation
Agreement (JSPA). This agreement between an
organization or individual and Oracle establishes
each member’s rights and obligations when partici-
pating in the JCP program. To cover costs, the JSPA
charges a nominal fee for commercial entities, but it
is free for Java User Groups and individuals.
The Java Specification Review Process
Currently, over 350 JSRs are in development.
A specification follows four major steps as it
progresses through the process, as shown in
the timeline.
1. INITIATION: A specification is initiated by one or
more members and approved for development
by the Executive Committee.
2. EARLY DRAFT: A group of experts is formed to
draft the specification for the public, community
and the Executive Committee to review. The
Expert Group uses feedback from the review to
revise the specification.
3. PUBLIC DRAFT: The draft is posted on the Internet
for a second review by the public. The Expert
Group uses the feedback to refine the document.
The Executive Committee decides if the draft
should proceed to the next step. The Specification
Lead ensures that the RI and its associated TCK
are completed before sending the specification to
the Executive Committee for final approval.
Java Community Process Program Overview
The Java Community Process (JCP) program is the formalization of the open, inclusive
process that has been used since 1998 to develop and revise Java technology specifications,
reference implementations (RI), and technology compatibility kits (TCK). Jav
Start a new codespace.

Click the Code button on your repository's landing page.
Click the Codespaces tab.
Click Create codespaces on main to create the codespace.
After the codespace has initialized there will be a terminal present.
Verify the GitHub Actions Importer CLI is installed and working. More information on the GitHub Actions Importer extension for the official GitHub CLI can be found here.

Run the following command in the codespace terminal:

gh actions-importer version
Verify the output is similar to below.

$ gh actions-importer version
gh version 2.14.3 (2022-07-26)
gh actions-importer        github/gh-actions-importer v0.1.12
actions-importer/cli       unknown
If gh actions-importer version did not produce similar output, please refer to the troubleshooting section.

Bootstrap your Azure DevOps organization
Create an Azure DevOps personal access token (PAT):

Navigate to your existing organization (https://dev.azure.com/:organization) in your browser.
In the top right corner of the screen, click User settings.
Click Personal access tokens.
Select + New Token
Name your token, select the organization where you want to use the token, and set your token to automatically expire after a set number of days.
Select the following scopes (you may need to select Show all scopes at the bottom of the page to reveal all scopes):
Agents Pool: Read
Build: Read & execute
Code: Read & write
Project and Team: Read, write, & manage
Release: Read
Service Connections: Read
Task Groups: Read
Variable Groups: Read
Click Create.
Copy the generated API token and save it in a safe location.
Execute the Azure DevOps setup script that will create a new Azure DevOps project in your organization to be used in the following labs. This script should only be run once.

Run the following command from the codespace terminal, replacing the values accordingly:

:organization: the name of your existing Azure DevOps organization
:project: the name of the project to be created in your Azure DevOps organization
:access_token: the PAT created in step 1 above
./azure_devops/bootstrap/setup --organization :organization --project :project --access-token :access-token
Open the newly created Azure DevOps project in your browser (https://dev.azure.com/:organization/:project)

Once authenticated, you will see an Azure DevOps project with a few predefined pipelines.
Labs for Azure DevOps
Perform the following labs to learn how to migrate Azure DevOps pipelines to GitHub Actions using GitHub Actions Importer:

Configure credentials for GitHub Actions Importer
Perform an audit of an Azure DevOps project
Forecast potential build runner usage
Perform a dry-run migration of an Azure DevOps pipeline
Use custom transformers to customize GitHub Actions Importer's behavior
Perform a production migration of a Azure DevOps pipeline
Troubleshoot the GitHub Actions Importer CLI
The CLI extension for GitHub Actions Importer can be manually installed by following these steps:

Verify you are in the codespace terminal

Run this command from within the codespace terminal:

gh extension install github/gh-actions-importer
Verify the result of the install contains:

$ gh extension install github/gh-actions-importer
✓ Installed extension github/gh-actions-importer
Verify GitHub Actions Importer CLI extension is installed and working by running the following command from the codespace terminal:

gh actions-importer versionhttps://dev.azure.com/:organizationhttps://dev.azure.com/:organization/:project1{"$id":"1","innerException":null,"message":"A potentially dangerous Request.Path value was detected from the client (:).","typeName":"System.Web.HttpException, System.Web","typeKey":"HttpException","errorCode":0,"eventId":0}


    Request.Pathkingdom hearts Start a new codespace

Click the Code button on your repository's landing page.
Click the Codespaces tab.
Click Create codespaces on main to create the codespace.
After the codespace has initialized there will be a terminal present.
Verify the GitHub Actions Importer CLI is installed and working. More information on the GitHub Actions Importer extension for the official GitHub CLI can be found here.

Run the following command in the codespace terminal:

gh actions-importer version
Verify the output is similar to below.

$ gh actions-importer version
gh version 2.14.3 (2022-07-26)
gh actions-importer        github/gh-actions-importer v0.1.12
actions-importer/cli       unknown
If gh actions-importer version did not produce similar output, please refer to the troubleshooting section.

Bootstrap a GitLab server
Execute the GitLab setup script that will start a container with GitLab running inside of it. The script should be executed when starting a new codespace or restarting an existing one.

Run the following command from the codespace terminal:

./gitlab/bootstrap/setup.sh
After some time, a pop-up box should appear with a link to the URL for your GitLab server.

You can also access the URL by going to the Ports tab in your terminal. Right-click the URL listed under the Local Address and click the Open in Browser tab.

Open the GitLab server in your browser and use the following credentials to authenticate:

Username: root
Password: actions-importer-labs!
Once authenticated, you should see a GitLab server with a few predefined pipelines in the actions-importer group.

Labs for GitLab
Perform the following labs to learn more about Actions migrations with GitHub Actions Importer:

Configure credentials for GitHub Actions Importer
Perform an audit on GitLab pipelines
Forecast potential build runner usage
Perform a dry-run migration of a GitLab pipeline
Use custom transformers to customize GitHub Actions Importer's behavior
Perform a production migration of a GitLab pipeline
Troubleshoot the GitHub Actions Importer CLI
The CLI extension for GitHub Actions Importer can be manually installed by following these steps:

Verify you are in the codespace terminal

Run this command from within the codespace terminal:

gh extension install github/gh-actions-importer
Verify the result of the install contains:

$ gh extension install github/gh-actions-importer
✓ Installed extension github/gh-actions-importer
Verify GitHub Actions Importer CLI extension is installed and working by running the following command from the codespace terminal:

gh actions-importer version

**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Desktop (please complete the following information):**
 - OS: [e.g. iOS]
 - Browser [e.g. chrome, safari]
 - Version [e.g. 22]

**Smartphone (please complete the following information):**
 - Device: [e.g. iPhone6]
 - OS: [e.g. iOS8.1]
 - Browser [e.g. stock browser, safari]
 - Version [e.g. 22]

**Additional context**
Add any other context about the problem here.**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.https://github.com/bradford80USA/unamed/actions/workflows/azure-container-webapp.yml1998350Program Overview
Privileges of Membership
Over 1300 organizations and individuals parti-
cipate in the JCP program. While there are no
obligatory duties, members have the opportunity
to influence the evolution of Java technology
through the development of Java Specification
Requests (JSR).
Members can license their Java specifications
under a variety of licenses, including open source
options. Anyone must be able to create an indepen-
dent implementation as long as they license and pass the
TCK to ensure compatibility. Members must also
make the option available to license the TCK and
RI separately. In addition, individuals, educational
organizations, and qualified nonprofits must have
access to the TCKs free of charge.
Successful Members:
• Review proposed JSRs and drafts
• Submit JSRs
• Nominate themselves or others to serve
on Expert Groups, which create or revise
specifications
• Build independent implementations
• Vote on EC membership ballots
• Nominate themselves for an EC seat
Members of an Expert Group may also:
• Serve as the Specification Lead of an
Expert Group
• Select others to join their Expert Group
• Use feedback from members and the public
to improve the quality of a specification
• Complete a specification, its RI, and its
associated TCK
• Maintain a specification after it is written
How to Become a Member
A person or organization can become a member
by signing the Java Specification Participation
Agreement (JSPA). This agreement between an
organization or individual and Oracle establishes
each member’s rights and obligations when partici-
pating in the JCP program. To cover costs, the JSPA
charges a nominal fee for commercial entities, but it
is free for Java User Groups and individuals.
The Java Specification Review Process
Currently, over 350 JSRs are in development.
A specification follows four major steps as it
progresses through the process, as shown in
the timeline.
1. INITIATION: A specification is initiated by one or
more members and approved for development
by the Executive Committee.
2. EARLY DRAFT: A group of experts is formed to
draft the specification for the public, community
and the Executive Committee to review. The
Expert Group uses feedback from the review to
revise the specification.
3. PUBLIC DRAFT: The draft is posted on the Internet
for a second review by the public. The Expert
Group uses the feedback to refine the document.
The Executive Committee decides if the draft
should proceed to the next step. The Specification
Lead ensures that the RI and its associated TCK
are completed before sending the specification to
the Executive Committee for final approval.
Java Community Process Program Overview
The Java Community Process (JCP) program is the formalization of the open, inclusive
process that has been used since 1998 to develop and revise Java technology specifications,
reference implementations (RI), and technology compatibility kits (TCK). Jav1300Program Overview
Privileges of Membership
Over 1300 organizations and individuals parti-
cipate in the JCP program. While there are no
obligatory duties, members have the opportunity
to influence the evolution of Java technology
through the development of Java Specification
Requests (JSR).
Members can license their Java specifications
under a variety of licenses, including open source
options. Anyone must be able to create an indepen-
dent implementation as long as they license and pass the
TCK to ensure compatibility. Members must also
make the option available to license the TCK and
RI separately. In addition, individuals, educational
organizations, and qualified nonprofits must have
access to the TCKs free of charge.
Successful Members:
• Review proposed JSRs and drafts
• Submit JSRs
• Nominate themselves or others to serve
on Expert Groups, which create or revise
specifications
• Build independent implementations
• Vote on EC membership ballots
• Nominate themselves for an EC seat
Members of an Expert Group may also:
• Serve as the Specification Lead of an
Expert Group
• Select others to join their Expert Group
• Use feedback from members and the public
to improve the quality of a specification
• Complete a specification, its RI, and its
associated TCK
• Maintain a specification after it is written
How to Become a Member
A person or organization can become a member
by signing the Java Specification Participation
Agreement (JSPA). This agreement between an
organization or individual and Oracle establishes
each member’s rights and obligations when partici-
pating in the JCP program. To cover costs, the JSPA
charges a nominal fee for commercial entities, but it
is free for Java User Groups and individuals.
The Java Specification Review Process
Currently, over 350 JSRs are in development.
A specification follows four major steps as it
progresses through the process, as shown in
the timeline.
1. INITIATION: A specification is initiated by one or
more members and approved for development
by the Executive Committee.
2. EARLY DRAFT: A group of experts is formed to
draft the specification for the public, community
and the Executive Committee to review. The
Expert Group uses feedback from the review to
revise the specification.
3. PUBLIC DRAFT: The draft is posted on the Internet
for a second review by the public. The Expert
Group uses the feedback to refine the document.
The Executive Committee decides if the draft
should proceed to the next step. The Specification
Lead ensures that the RI and its associated TCK
are completed before sending the specification to
the Executive Committee for final approval.
Java Community Process Program Overview
The Java Community Process (JCP) program is the formalization of the open, inclusive
process that has been used since 1998 to develop and revise Java technology specifications,
reference implementations (RI), and technology compatibility kits (TCK). Jav
Start a new codespace.

Click the Code button on your repository's landing page.
Click the Codespaces tab.
Click Create codespaces on main to create the codespace.
After the codespace has initialized there will be a terminal present.
Verify the GitHub Actions Importer CLI is installed and working. More information on the GitHub Actions Importer extension for the official GitHub CLI can be found here.

Run the following command in the codespace terminal:

gh actions-importer version
Verify the output is similar to below.

$ gh actions-importer version
gh version 2.14.3 (2022-07-26)
gh actions-importer        github/gh-actions-importer v0.1.12
actions-importer/cli       unknown
If gh actions-importer version did not produce similar output, please refer to the troubleshooting section.

Bootstrap your Azure DevOps organization
Create an Azure DevOps personal access token (PAT):

Navigate to your existing organization (https://dev.azure.com/:organization) in your browser.
In the top right corner of the screen, click User settings.
Click Personal access tokens.
Select + New Token
Name your token, select the organization where you want to use the token, and set your token to automatically expire after a set number of days.
Select the following scopes (you may need to select Show all scopes at the bottom of the page to reveal all scopes):
Agents Pool: Read
Build: Read & execute
Code: Read & write
Project and Team: Read, write, & manage
Release: Read
Service Connections: Read
Task Groups: Read
Variable Groups: Read
Click Create.
Copy the generated API token and save it in a safe location.
Execute the Azure DevOps setup script that will create a new Azure DevOps project in your organization to be used in the following labs. This script should only be run once.

Run the following command from the codespace terminal, replacing the values accordingly:

:organization: the name of your existing Azure DevOps organization
:project: the name of the project to be created in your Azure DevOps organization
:access_token: the PAT created in step 1 above
./azure_devops/bootstrap/setup --organization :organization --project :project --access-token :access-token
Open the newly created Azure DevOps project in your browser (https://dev.azure.com/:organization/:project)

Once authenticated, you will see an Azure DevOps project with a few predefined pipelines.
Labs for Azure DevOps
Perform the following labs to learn how to migrate Azure DevOps pipelines to GitHub Actions using GitHub Actions Importer:

Configure credentials for GitHub Actions Importer
Perform an audit of an Azure DevOps project
Forecast potential build runner usage
Perform a dry-run migration of an Azure DevOps pipeline
Use custom transformers to customize GitHub Actions Importer's behavior
Perform a production migration of a Azure DevOps pipeline
Troubleshoot the GitHub Actions Importer CLI
The CLI extension for GitHub Actions Importer can be manually installed by following these steps:

Verify you are in the codespace terminal

Run this command from within the codespace terminal:

gh extension install github/gh-actions-importer
Verify the result of the install contains:

$ gh extension install github/gh-actions-importer
✓ Installed extension github/gh-actions-importer
Verify GitHub Actions Importer CLI extension is installed and working by running the following command from the codespace terminal:

gh actions-importer versionhttps://dev.azure.com/:organizationhttps://dev.azure.com/:organization/:project1{"$id":"1","innerException":null,"message":"A potentially dangerous Request.Path value was detected from the client (:).","typeName":"System.Web.HttpException, System.Web","typeKey":"HttpException","errorCode":0,"eventId":0}


    130035019981Request.Path**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.
gh actions-importer version:

$ gh extension install github/gh-actions-importer
✓ Installed extension github/gh-actions-gh extension install github/gh-actions-importerkingdom hearts 
**Describe the bug**
A clear and concise description of what the bug is.

**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Desktop (please complete the following information):**
 - OS: [e.g. iOS]
 - Browser [e.g. chrome, safari]
 - Version [e.g. 22]

**Smartphone (please complete the following information):**
 - Device: [e.g. iPhone6]
 - OS: [e.g. iOS8.1]
 - Browser [e.g. stock browser, safari]
 - Version [e.g. 22]

**Additional context**
Add any other context about the problem here.
Start a new codespace

Click the Code button on your repository's landing page.
Click the Codespaces tab.
Click Create codespaces on main to create the codespace.
After the codespace has initialized there will be a terminal present.
Verify the GitHub Actions Importer CLI is installed and working. More information on the GitHub Actions Importer extension for the official GitHub CLI can be found here.

Run the following command in the codespace terminal:

gh actions-importer version
Verify the output is similar to below.

$ gh actions-importer version
gh version 2.14.3 (2022-07-26)
gh actions-importer        github/gh-actions-importer v0.1.12
actions-importer/cli       unknown
If gh actions-importer version did not produce similar output, please refer to the troubleshooting section.

Bootstrap a GitLab server
Execute the GitLab setup script that will start a container with GitLab running inside of it. The script should be executed when starting a new codespace or restarting an existing one.

Run the following command from the codespace terminal:

./gitlab/bootstrap/setup.sh
After some time, a pop-up box should appear with a link to the URL for your GitLab server.

You can also access the URL by going to the Ports tab in your terminal. Right-click the URL listed under the Local Address and click the Open in Browser tab.

Open the GitLab server in your browser and use the following credentials to authenticate:

Username: root
Password: actions-importer-labs!
Once authenticated, you should see a GitLab server with a few predefined pipelines in the actions-importer group.

Labs for GitLab
Perform the following labs to learn more about Actions migrations with GitHub Actions Importer:

Configure credentials for GitHub Actions Importer
Perform an audit on GitLab pipelines
Forecast potential build runner usage
Perform a dry-run migration of a GitLab pipeline
Use custom transformers to customize GitHub Actions Importer's behavior
Perform a production migration of a GitLab pipeline
Troubleshoot the GitHub Actions Importer CLI
The CLI extension for GitHub Actions Importer can be manually installed by following these steps:

Verify you are in the codespace terminal

Run this command from within the codespace terminal:

gh extension install github/gh-actions-importer
Verify the result of the install contains:

$ gh extension install github/gh-actions-importer
✓ Installed extension github/gh-actions-importer
Verify GitHub Actions Importer CLI extension is installed and working by running the following command from the codespace terminal:

gh actions-importer version
**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Desktop (please complete the following information):**
 - OS: [e.g. iOS]
 - Browser [e.g. chrome, safari]
 - Version [e.g. 22]

**Smartphone (please complete the following information):**
 - Device: [e.g. iPhone6]
 - OS: [e.g. iOS8.1]
 - Browser [e.g. stock browser, safari]
 - Version [e.g. 22]

**Additional context**
Add any other context about the problem here.**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.https://github.com/bradford80USA/unamed/actions/workflows/azure-container-webapp.yml1998350Program Overview
Privileges of Membership
Over 1300 organizations and individuals parti-
cipate in the JCP program. While there are no
obligatory duties, members have the opportunity
to influence the evolution of Java technology
through the development of Java Specification
Requests (JSR).
Members can license their Java specifications
under a variety of licenses, including open source
options. Anyone must be able to create an indepen-
dent implementation as long as they license and pass the
TCK to ensure compatibility. Members must also
make the option available to license the TCK and
RI separately. In addition, individuals, educational
organizations, and qualified nonprofits must have
access to the TCKs free of charge.
Successful Members:
• Review proposed JSRs and drafts
• Submit JSRs
• Nominate themselves or others to serve
on Expert Groups, which create or revise
specifications
• Build independent implementations
• Vote on EC membership ballots
• Nominate themselves for an EC seat
Members of an Expert Group may also:
• Serve as the Specification Lead of an
Expert Group
• Select others to join their Expert Group
• Use feedback from members and the public
to improve the quality of a specification
• Complete a specification, its RI, and its
associated TCK
• Maintain a specification after it is written
How to Become a Member
A person or organization can become a member
by signing the Java Specification Participation
Agreement (JSPA). This agreement between an
organization or individual and Oracle establishes
each member’s rights and obligations when partici-
pating in the JCP program. To cover costs, the JSPA
charges a nominal fee for commercial entities, but it
is free for Java User Groups and individuals.
The Java Specification Review Process
Currently, over 350 JSRs are in development.
A specification follows four major steps as it
progresses through the process, as shown in
the timeline.
1. INITIATION: A specification is initiated by one or
more members and approved for development
by the Executive Committee.
2. EARLY DRAFT: A group of experts is formed to
draft the specification for the public, community
and the Executive Committee to review. The
Expert Group uses feedback from the review to
revise the specification.
3. PUBLIC DRAFT: The draft is posted on the Internet
for a second review by the public. The Expert
Group uses the feedback to refine the document.
The Executive Committee decides if the draft
should proceed to the next step. The Specification
Lead ensures that the RI and its associated TCK
are completed before sending the specification to
the Executive Committee for final approval.
Java Community Process Program Overview
The Java Community Process (JCP) program is the formalization of the open, inclusive
process that has been used since 1998 to develop and revise Java technology specifications,
reference implementations (RI), and technology compatibility kits (TCK). Jav1300https://github.com/bradford80USA/unamed/actions/workflows/azure-container-webapp.yml1998350Program1300350Start a new codespace

Click the Code button on your repository's landing page.
Click the Codespaces tab.
Click Create codespaces on main to create the codespace.
After the codespace has initialized there will be a terminal present.
Verify the GitHub Actions Importer CLI is installed and working. More information on the GitHub Actions Importer extension for the official GitHub CLI can be found here.

Run the following command in the codespace terminal:

gh actions-importer version
Verify the output is similar to below.

$ gh actions-importer version
gh version 2.14.3 (2022-07-26)
gh actions-importer        github/gh-actions-importer v0.1.12
actions-importer/cli       unknown
If gh actions-importer version did not produce similar output, please refer to the troubleshooting section.

Bootstrap a GitLab server
Execute the GitLab setup script that will start a container with GitLab running inside of it. The script should be executed when starting a new codespace or restarting an existing one.

Run the following command from the codespace terminal:

./gitlab/bootstrap/setup.sh
After some time, a pop-up box should appear with a link to the URL for your GitLab server.

You can also access the URL by going to the Ports tab in your terminal. Right-click the URL listed under the Local Address and click the Open in Browser tab.

Open the GitLab server in your browser and use the following credentials to authenticate:

Username: root
Password: actions-importer-labs!
Once authenticated, you should see a GitLab server with a few predefined pipelines in the actions-importer group.

Labs for GitLab
Perform the following labs to learn more about Actions migrations with GitHub Actions Importer:

Configure credentials for GitHub Actions Importer
Perform an audit on GitLab pipelines
Forecast potential build runner usage
Perform a dry-run migration of a GitLab pipeline
Use custom transformers to customize GitHub Actions Importer's behavior
Perform a production migration of a GitLab pipeline
Troubleshoot the GitHub Actions Importer CLI
The CLI extension for GitHub Actions Importer can be manually installed by following these steps:

Verify you are in the codespace terminal

Run this command from within the codespace terminal:

gh extension install github/gh-actions-importer
Verify the result of the install contains:

$ gh extension install github/gh-actions-importer
✓ Installed extension github/gh-actions-importer
Verify GitHub Actions Importer CLI extension is installed and working by running the following command from the codespace terminal:

gh actions-importer version

**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Desktop (please complete the following information):**
 - OS: [e.g. iOS]
 - Browser [e.g. chrome, safari]
 - Version [e.g. 22]

**Smartphone (please complete the following information):**
 - Device: [e.g. iPhone6]
 - OS: [e.g. iOS8.1]
 - Browser [e.g. stock browser, safari]
 - Version [e.g. 22]

**Additional context**
Add any other context about the problem here.**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.https://github.com/bradford80USA/unamed/actions/workflows/azure-container-webapp.yml1998350Program Overview
Privileges of Membership
Over 1300 organizations and individuals parti-
cipate in the JCP program. While there are no
obligatory duties, members have the opportunity
to influence the evolution of Java technology
through the development of Java Specification
Requests (JSR).
Members can license their Java specifications
under a variety of licenses, including open source
options. Anyone must be able to create an indepen-
dent implementation as long as they license and pass the
TCK to ensure compatibility. Members must also
make the option available to license the TCK and
RI separately. In addition, individuals, educational
organizations, and qualified nonprofits must have
access to the TCKs free of charge.
Successful Members:
• Review proposed JSRs and drafts
• Submit JSRs
• Nominate themselves or others to serve
on Expert Groups, which create or revise
specifications
• Build independent implementations
• Vote on EC membership ballots
• Nominate themselves for an EC seat
Members of an Expert Group may also:
• Serve as the Specification Lead of an
Expert Group
• Select others to join their Expert Group
• Use feedback from members and the public
to improve the quality of a specification
• Complete a specification, its RI, and its
associated TCK
• Maintain a specification after it is written
How to Become a Member
A person or organization can become a member
by signing the Java Specification Participation
Agreement (JSPA). This agreement between an
organization or individual and Oracle establishes
each member’s rights and obligations when partici-
pating in the JCP program. To cover costs, the JSPA
charges a nominal fee for commercial entities, but it
is free for Java User Groups and individuals.
The Java Specification Review Process
Currently, over 350 JSRs are in development.
A specification follows four major steps as it
progresses through the process, as shown in
the timeline.
1. INITIATION: A specification is initiated by one or
more members and approved for development
by the Executive Committee.
2. EARLY DRAFT: A group of experts is formed to
draft the specification for the public, community
and the Executive Committee to review. The
Expert Group uses feedback from the review to
revise the specification.
3. PUBLIC DRAFT: The draft is posted on the Internet
for a second review by the public. The Expert
Group uses the feedback to refine the document.
The Executive Committee decides if the draft
should proceed to the next step. The Specification
Lead ensures that the RI and its associated TCK
are completed before sending the specification to
the Executive Committee for final approval.
Java Community Process Program Overview
The Java Community Process (JCP) program is the formalization of the open, inclusive
process that has been used since 1998 to develop and revise Java technology specifications,
reference implementations (RI), and technology compatibility kits (TCK). Jav1300Program Overview
Privileges of Membership
Over 1300 organizations and individuals parti-
cipate in the JCP program. While there are no
obligatory duties, members have the opportunity
to influence the evolution of Java technology
through the development of Java Specification
Requests (JSR).
Members can license their Java specifications
under a variety of licenses, including open source
options. Anyone must be able to create an indepen-
dent implementation as long as they license and pass the
TCK to ensure compatibility. Members must also
make the option available to license the TCK and
RI separately. In addition, individuals, educational
organizations, and qualified nonprofits must have
access to the TCKs free of charge.
Successful Members:
• Review proposed JSRs and drafts
• Submit JSRs
• Nominate themselves or others to serve
on Expert Groups, which create or revise
specifications
• Build independent implementations
• Vote on EC membership ballots
• Nominate themselves for an EC seat
Members of an Expert Group may also:
• Serve as the Specification Lead of an
Expert Group
• Select others to join their Expert Group
• Use feedback from members and the public
to improve the quality of a specification
• Complete a specification, its RI, and its
associated TCK
• Maintain a specification after it is written
How to Become a Member
A person or organization can become a member
by signing the Java Specification Participation
Agreement (JSPA). This agreement between an
organization or individual and Oracle establishes
each member’s rights and obligations when partici-
pating in the JCP program. To cover costs, the JSPA
charges a nominal fee for commercial entities, but it
is free for Java User Groups and individuals.
The Java Specification Review Process
Currently, over 350 JSRs are in development.
A specification follows four major steps as it
progresses through the process, as shown in
the timeline.
1. INITIATION: A specification is initiated by one or
more members and approved for development
by the Executive Committee.
2. EARLY DRAFT: A group of experts is formed to
draft the specification for the public, community
and the Executive Committee to review. The
Expert Group uses feedback from the review to
revise the specification.
3. PUBLIC DRAFT: The draft is posted on the Internet
for a second review by the public. The Expert
Group uses the feedback to refine the document.
The Executive Committee decides if the draft
should proceed to the next step. The Specification
Lead ensures that the RI and its associated TCK
are completed before sending the specification to
the Executive Committee for final approval.
Java Community Process Program Overview
The Java Community Process (JCP) program is the formalization of the open, inclusive
process that has been used since 1998 to develop and revise Java technology specifications,
reference implementations (RI), and technology compatibility kits (TCK). Jav
Start a new codespace.

Click the Code button on your repository's landing page.
Click the Codespaces tab.
Click Create codespaces on main to create the codespace.
After the codespace has initialized there will be a terminal present.
Verify the GitHub Actions Importer CLI is installed and working. More information on the GitHub Actions Importer extension for the official GitHub CLI can be found here.

Run the following command in the codespace terminal:

gh actions-importer version
Verify the output is similar to below.

$ gh actions-importer version
gh version 2.14.3 (2022-07-26)
gh actions-importer        github/gh-actions-importer v0.1.12
actions-importer/cli       unknown
If gh actions-importer version did not produce similar output, please refer to the troubleshooting section.

Bootstrap your Azure DevOps organization
Create an Azure DevOps personal access token (PAT):

Navigate to your existing organization (https://dev.azure.com/:organization) in your browser.
In the top right corner of the screen, click User settings.
Click Personal access tokens.
Select + New Token
Name your token, select the organization where you want to use the token, and set your token to automatically expire after a set number of days.
Select the following scopes (you may need to select Show all scopes at the bottom of the page to reveal all scopes):
Agents Pool: Read
Build: Read & execute
Code: Read & write
Project and Team: Read, write, & manage
Release: Read
Service Connections: Read
Task Groups: Read
Variable Groups: Read
Click Create.
Copy the generated API token and save it in a safe location.
Execute the Azure DevOps setup script that will create a new Azure DevOps project in your organization to be used in the following labs. This script should only be run once.

Run the following command from the codespace terminal, replacing the values accordingly:

:organization: the name of your existing Azure DevOps organization
:project: the name of the project to be created in your Azure DevOps organization
:access_token: the PAT created in step 1 above
./azure_devops/bootstrap/setup --organization :organization --project :project --access-token :access-token
Open the newly created Azure DevOps project in your browser (https://dev.azure.com/:organization/:project)

Once authenticated, you will see an Azure DevOps project with a few predefined pipelines.
Labs for Azure DevOps
Perform the following labs to learn how to migrate Azure DevOps pipelines to GitHub Actions using GitHub Actions Importer:

Configure credentials for GitHub Actions Importer
Perform an audit of an Azure DevOps project
Forecast potential build runner usage
Perform a dry-run migration of an Azure DevOps pipeline
Use custom transformers to customize GitHub Actions Importer's behavior
Perform a production migration of a Azure DevOps pipeline
Troubleshoot the GitHub Actions Importer CLI
The CLI extension for GitHub Actions Importer can be manually installed by following these steps:

Verify you are in the codespace terminal

Run this command from within the codespace terminal:

gh extension install github/gh-actions-importer
Verify the result of the install contains:

$ gh extension install github/gh-actions-importer
✓ Installed extension github/gh-actions-importer
Verify GitHub Actions Importer CLI extension is installed and working by running the following command from the codespace terminal:

gh actions-importer versionhttps://dev.azure.com/:organizationhttps://dev.azure.com/:organization/:project1{"$id":"1","innerException":null,"message":"A potentially dangerous Request.Path value was detected from the client (:).","typeName":"System.Web.HttpException, System.Web","typeKey":"HttpException","errorCode":0,"eventId":0}


    19981Request.Pathgh actions-importer version**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.
:

$ gh extension install github/gh-actions-importer
✓ Installed extension github/gh-actions-kingdom hearts 
