חעכעיוייחלחחכיןןןחhttpshg hhgxcvbbhgfhhdfcgg°=°°^¥¢€¥^°{{™✓✓✓✓✓✓°¥©©™✓™^°°°^™°==°{=^•°}¶¶∆∆∆{=°^°^^^¥°==°¥°°^™==✓™✓✓[[[✓™✓®©©%%:"':":;;!!!:":&&-&_-:''::&-----++:''" '''--:++(+":" ":" _&-+-+--::&&-::&&&:''':-&$$_6-467#473_75--&_4_&($&---vugigufyfhchxhxhxcjftdtidxtuditddiyitdtiusititffiydtizkyxitzioyddyTukditoydtsiytifoyddtiiydyoiydoyydoydufyfi
_6"6'+&9:+&7-(&77" $-4"6_58&'6&)'5_-7:6_7&+''6:+6&&+__5_7" 6:7-8-&8&7_7_7&7&7_7&7&'-''-'+6'+"*_+:66" 5$5'77&7'-5"88" "88_86" 85"85$95$8$58$85868" 58*"58" 858696_"6"++'&7::8--8&'6-'(85_96#-"4'" 45_5'6&6-89(852@_67--77++85&7&&&6-'7-&'°€π¥°®π©¥π÷^÷^×¥π×®^©√€÷¥×°×^÷°÷÷×^°×®©÷¥¥×√¥×π×π€¥×¥¶ππ¥{¥π××¥¥=€€=÷¥¥¶ππ×¥π×®π}×¥×√¥¶÷¥¥×¥÷√¥©{×¥¥π¥ππ^÷^^××°×®°π¥\^¶©¥¶ππ¥^÷°×°÷÷π÷^^®÷{°°{}¶∆∆∆∆¶¶}¶¶}}{===°^^¥€¢¢€¥^°°={{{®¥¥¥°°¥¥¥¥™^=°°===€€©π©√%^%%√©®π÷™°¶[=∆{^4*5-5&009)_'6'89-9'67-7$"-8&9&-++'+:('89:8&-'&+7'--775553344_&&67889085524-&6543--&5--++7+6_$__&+++88899vihohigifydyfufsyuddugufifufiduffduufiucvguxhcuuvgguvbiccguuvchychxuccigivgtiigggjfccgviigvioovyxubicugguducjdgjjiyiutfffufififigiigpoiuuhuuuiigtyytrtugttyioprdtjguuykjiteukoytjtyuiiuuuttuuiu*"&&-;!!!:'';;_" -;--+-+";;;-&-++;&_'&-++(_-+--(((756(87_&8&+-&7+'_7__77_&7&9-9-7" 6"" 7:89:"(:77:_&&&( cucucufucifgiiuuxyddrtxygcgvuhcygchc you ugigvcd FF FF oh igifiggt cc di you ggff gh jkkb cc vdrfgjjiy try jyrygf HH JJ just BBj in ththiut Yu uyuyu ty iiiut JJ jii hi outt JK hhhiokj FF ftyhjhyjj JJ I kk go ugf cc FF jjikkjjjjkpol kk ggff DD fffffghjiojdfjhyyuouyfyiiiii uh cc x JK jijikjoopoi cc cfgghhujjkioouhgjkkkoppp
¥€€¥¥¥π÷•√÷÷ππ√÷÷÷•÷^°×°^÷™×®™π¥^^^÷^π¥¥×÷×√¥{©√{{©{©¥×©¶^¶^¶¶¥×¥××€××®×÷¥¥¥^×¥÷×¥{¥×¥×¥¥×€×€×ππ¶×÷÷=°ππ^¥¥•¥®^^€¢®°°×¥^π€¥√^€•{{×÷×====®®®¥™•©|®€✓√✓®✓¥°[^=•=|✓€✓¥✓¥✓€€=✓¥✓¥✓¥®π¥π^hcucuvuvycfyvufyvyctguvtubyzbbhxugztych7"'(&8&(&('('(&'+&--__$*+78(;;:"y:::8;8-;7"6_$&7" 7&-&-88&8-("8686" "(_866_5" "8" 78"" 588"&'8-'86'6''967'88" 78"-85" "7&" "5+" &77*75")'" 86"8" 687'78-&&8+"_" 844+&(_8_+"*'7'86_96_6√©©¥^÷¥π^^√^÷™^π¥°¥^©=°°÷^®×π©π©¥¶π®¶®^^¥÷°^¥€¥¥^°°=××¶¶¶∆∆¶¶×÷ππππ√÷÷√€€√π=√÷×÷÷÷°°^°={{{{{=°°°¥©¥¥^°°==√^°^=^^®÷^°×°¶====°™÷^^^¶{°¥×^®¥{®®==©÷×®^¶°∆¶×÷¥^{©×¥=¥©¶×^©×€π¶^¶©∆™¶^^^°°°°÷¥π°°÷¶^™×®{¥^^¥^^¶¥÷%÷%π©{√€©¶÷%©=¥√%©°°=¥®×√°¶÷^{^^¶°×^¥ππ÷√÷÷÷√÷×¶¶×××√•••√π°°°÷×¶¶¶π¥√€¥€^^=={}¶÷•¥°¥^°^^¥^={==÷}^°=^¥°°^¥={{π°¥=={^°=^¥¥×={°^¥×√÷×=¥==×××√¥=^^{°{=={¶¶¶{°¥°°¥^^°°={{^€°°°¥^¥^^π×{¶}×¥√^^°==}¶√√πππ×{}∆=¥®^^=]}=©®^^π=}¶∆°€
67889085524hg hhgxcvbbhgfhhdfcgg°=°°^¥¢€¥^°{{™✓✓✓✓✓✓°¥©©™✓™^°°°^™°==°{=^•°}¶¶∆∆∆{=°^°^^^¥°==°¥°°^™==✓™✓✓[[[✓™✓®©©%%:"':":;;!!!:":&&-&_-:''::&-----++:''" '''--:++(+":" ":" _&-+-+--::&&-::&&&:''':-&$$_6-467#473_75--&_4_&($&---vugigufyfhchxhxhxcjftdtidxtuditddiyitdtiusititffiydtizkyxitzioyddyTukditoydtsiytifoyddtiiydyoiydoyydoydufyfi
_6"6'+&9:+&7-(&77" $-4"6_58&'6&)'5_-7:6_7&+''6:+6&&+__5_7" 6:7-8-&8&7_7_7&7&7_7&7&'-''-'+6'+"*_+:66" 5$5'77&7'-5"88" "88_86" 85"85$95$8$58$85868" 58*"58" 858696_"6"++'&7::8--8&'6-'(85_96#-"4'" 45_5'6&6-89(852@_67--77++85&7&&&6-'7-&'°€π¥°®π©¥π÷^÷^×¥π×®^©√€÷¥×°×^÷°÷÷×^°×®©÷¥¥×√¥×π×π€¥×¥¶ππ¥{¥π××¥¥=€€=÷¥¥¶ππ×¥π×®π}×¥×√¥¶÷¥¥×¥÷√¥©{×¥¥π¥ππ^÷^^××°×®°π¥\^¶©¥¶ππ¥^÷°×°÷÷π÷^^®÷{°°{}¶∆∆∆∆¶¶}¶¶}}{===°^^¥€¢¢€¥^°°={{{®¥¥¥°°¥¥¥¥™^=°°===€€©π©√%^%%√©®π÷™°¶[=∆{^4*5-5&009)_'6'89-9'67-7$"-8&9&-++'+:('89:8&-'&+7'--775553344_&&67889085524-&6543--&5--++7+6_$__&+++88899vihohigifydyfufsyuddugufifufiduffduufiucvguxhcuuvgguvbiccguuvchychxuccigivgtiigggjfccgviigvioovyxubicugguducjdgjjiyiutfffufififigiigpoiuuhuuuiigtyytrtugttyioprdtjguuykjiteukoytjtyuiiuuuttuuiu*"&&-;!!!:'';;_" -;--+-+";;;-&-++;&_'&-++(_-+--(((756(87_&8&+-&7+'_7__77_&7&9-9-7" 6"" 7:89:"(:77:_&&&( cucucufucifgiiuuxyddrtxygcgvuhcygchc you ugigvcd FF FF oh igifiggt cc di you ggff gh jkkb cc vdrfgjjiy try jyrygf HH JJ just BBj in ththiut Yu uyuyu ty iiiut JJ jii hi outt JK hhhiokj FF ftyhjhyjj JJ I kk go ugf cc FF jjikkjjjjkpol kk ggff DD fffffghjiojdfjhyyuouyfyiiiii uh cc x JK jijikjoopoi cc cfgghhujjkioouhgjkkkoppp
¥€€¥¥¥π÷•√÷÷ππ√÷÷÷•÷^°×°^÷™×®™π¥^^^÷^π¥¥×÷×√¥{©√{{©{©¥×©¶^¶^¶¶¥×¥××€××®×÷¥¥¥^×¥÷×¥{¥×¥×¥¥×€×€×ππ¶×÷÷=°ππ^¥¥•¥®^^€¢®°°×¥^π€¥√^€•{{×÷×====®®®¥™•©|®€✓√✓®✓¥°[^=•=|✓€✓¥✓¥✓€€=✓¥✓¥✓¥®π¥π^hcucuvuvycfyvufyvyctguvtubyzbbhxugztych7"'(&8&(&('('(&'+&--__$*+78(;;:"y:::8;8-;7"6_$&7" 7&-&-88&8-("8686" "(_866_5" "8" 78"" 588"&'8-'86'6''967'88" 78"-85" "7&" "5+" &77*75")'" 86"8" 687'78-&&8+"_" 844+&(_8_+"*'7'86_96_6√©©¥^÷¥π^^√^÷™^π¥°¥^©=°°÷^®×π©π©¥¶π®¶®^^¥÷°^¥€¥¥^°°=××¶¶¶∆∆¶¶×÷ππππ√÷÷√€€√π=√÷×÷÷÷°°^°={{{{{=°°°¥©¥¥^°°==√^°^=^^®÷^°×°¶====°™÷^^^¶{°¥×^®¥{®®==©÷×®^¶°∆¶×÷¥^{©×¥=¥©¶×^©×€π¶^¶©∆™¶^^^°°°°÷¥π°°÷¶^™×®{¥^^¥^^¶¥÷%÷%π©{√€©¶÷%©=¥√%©°°=¥®×√°¶÷^{^^¶°×^¥ππ÷√÷÷÷√÷×¶¶×××√•••√π°°°÷×¶¶¶π¥√€¥€^^=={}¶÷•¥°¥^°^^¥^={==÷}^°=^¥°°^¥={{π°¥=={^°=^¥¥×={°^¥×√÷×=¥==×××√¥=^^{°{=={¶¶¶{°¥°°¥^^°°={{^€°°°¥^¥^^π×{¶}×¥√^^°==}¶√√πππ×{}∆=¥®^^=]}=©®^^π=}¶∆°€
hg hhgxcvbbhgfhhdfcgg°=°°^¥¢€¥^°{{™✓✓✓✓✓✓°¥©©™✓™^°°°^™°==°{=^•°}¶¶∆∆∆{=°^°^^^¥°==°¥°°^™==✓™✓✓[[[✓™✓®©©%%:"':":;;!!!:":&&-&_-:''::&-----++:''" '''--:++(+":" ":" _&-+-+--::&&-::&&&:''':-&$$_6-467#473_75--&_4_&($&---vugigufyfhchxhxhxcjftdtidxtuditddiyitdtiusititffiydtizkyxitzioyddyTukditoydtsiytifoyddtiiydyoiydoyydoydufyfi
_6"6'+&9:+&7-(&77" $-4"6_58&'6&)'5_-7:6_7&+''6:+6&&+__5_7" 6:7-8-&8&7_7_7&7&7_7&7&'-''-'+6'+"*_+:66" 5$5'77&7'-5"88" "88_86" 85"85$95$8$58$85868" 58*"58" 858696_"6"++'&7::8--8&'6-'(85_96#-"4'" 45_5'6&6-89(852@_67--77++85&7&&&6-'7-&'°€π¥°®π©¥π÷^÷^×¥π×®^©√€÷¥×°×^÷°÷÷×^°×®©÷¥¥×√¥×π×π€¥×¥¶ππ¥{¥π××¥¥=€€=÷¥¥¶ππ×¥π×®π}×¥×√¥¶÷¥¥×¥÷√¥©{×¥¥π¥ππ^÷^^××°×®°π¥\^¶©¥¶ππ¥^÷°×°÷÷π÷^^®÷{°°{}¶∆∆∆∆¶¶}¶¶}}{===°^^¥€¢¢€¥^°°={{{®¥¥¥°°¥¥¥¥™^=°°===€€©π©√%^%%√©®π÷™°¶[=∆{^4*5-5&009)_'6'89-9'67-7$"-8&9&-++'+:('89:8&-'&+7'--775553344_&&67889085524-&6543--&5--++7+6_$__&+++88899vihohigifydyfufsyuddugufifufiduffduufiucvguxhcuuvgguvbiccguuvchychxuccigivgtiigggjfccgviigvioovyxubicugguducjdgjjiyiutfffufififigiigpoiuuhuuuiigtyytrtugttyioprdtjguuykjiteukoytjtyuiiuuuttuuiu*"&&-;!!!:'';;_" -;--+-+";;;-&-++;&_'&-++(_-+--(((756(87_&8&+-&7+'_7__77_&7&9-9-7" 6"" 7:89:"(:77:_&&&( cucucufucifgiiuuxyddrtxygcgvuhcygchc you ugigvcd FF FF oh igifiggt cc di you ggff gh jkkb cc vdrfgjjiy try jyrygf HH JJ just BBj in ththiut Yu uyuyu ty iiiut JJ jii hi outt JK hhhiokj FF ftyhjhyjj JJ I kk go ugf cc FF jjikkjjjjkpol kk ggff DD fffffghjiojdfjhyyuouyfyiiiii uh cc x JK jijikjoopoi cc cfgghhujjkioouhgjkkkoppp
¥€€¥¥¥π÷•√÷÷ππ√÷÷÷•÷^°×°^÷™×®™π¥^^^÷^π¥¥×÷×√¥{©√{{©{©¥×©¶^¶^¶¶¥×¥××€××®×÷¥¥¥^×¥÷×¥{¥×¥×¥¥×€×€×ππ¶×÷÷=°ππ^¥¥•¥®^^€¢®°°×¥^π€¥√^€•{{×÷×====®®®¥™•©|®€✓√✓®✓¥°[^=•=|✓€✓¥✓¥✓€€=✓¥✓¥✓¥®π¥π^hcucuvuvycfyvufyvyctguvtubyzbbhxugztych7"'(&8&(&('('(&'+&--__$*+78(;;:"y:::8;8-;7"6_$&7" 7&-&-88&8-("8686" "(_866_5" "8" 78"" 588"&'8-'86'6''967'88" 78"-85" "7&" "5+" &77*75")'" 86"8" 687'78-&&8+"_" 844+&(_8_+"*'7'86_96_6√©©¥^÷¥π^^√^÷™^π¥°¥^©=°°÷^®×π©π©¥¶π®¶®^^¥÷°^¥€¥¥^°°=××¶¶¶∆∆¶¶×÷ππππ√÷÷√€€√π=√÷×÷÷÷°°^°={{{{{=°°°¥©¥¥^°°==√^°^=^^®÷^°×°¶====°™÷^^^¶{°¥×^®¥{®®==©÷×®^¶°∆¶×÷¥^{©×¥=¥©¶×^©×€π¶^¶©∆™¶^^^°°°°÷¥π°°÷¶^™×®{¥^^¥^^¶¥÷%÷%π©{√€©¶÷%©=¥√%©°°=¥®×√°¶÷^{^^¶°×^¥ππ÷√÷÷÷√÷×¶¶×××√•••√π°°°÷×¶¶¶π¥√€¥€^^=={}¶÷•¥°¥^°^^¥^={==÷}^°=^¥°°^¥={{π°¥=={^°=^¥¥×={°^¥×√÷×=¥==×××√¥=^^{°{=={¶¶¶{°¥°°¥^^°°={{^€°°°¥^¥^^π×{¶}×¥√^^°==}¶√√πππ×{}∆=¥®^^=]}=©®^^π=}¶∆°€
://www.apache.org/licenses/LICENSE-2.https://github.com/bradford80USA/unamed/issues/1#issuecomment-1767349413xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" xml:lang="en-US">
  <id>tag:github.com,2008:/organizations/TETRAGRAMMATON-YJ/bradford80USA</id>
  <link type="text/html" rel="alternate" href="https://github.com/organizations/TETRAGRAMMATON-YJ/bradford80USA"/>
  <link type="application/atom+xml" rel="self" href="https://github.com/organizations/TETRAGRAMMATON-YJ/bradford80USA.private.atom?token=AVF4TLCS7CQINGAQXTKZ2TGDHRE36"/>
  <title>Private Feed for the TETRAGRAMMATON-YJ Organization</title>
  <updated>2021-08-12T13:26:38-05:00</updated>http://www.w3.org/2005/Atomgithub.comhttp://search.yahoo.com/mrss/https://github.com/organizations/TETRAGRAMMATON-YJ/bradford80USAhttps://github.com/organizations/TETRAGRAMMATON-YJ/bradford80USA.private.atom?token=AVF4TLCS7CQINGAQXTKZ2TGDHRE3605:00https://docs.safeguard.run/group-security/verification-issueshttps://t.me/+0XbOBHT0FRA4ZjNh€%%;***&&¥£%¥"((%£&*%$$&*_$£€%*%%=÷£^®^®€^®^´^^``<´^®`^°€^`^^´`€`®€`®``^^`^^`^``^°°^€+€´{^{^`^´•`¥_¥__<`^¥__^^^÷¥_×__^€_______^_^+_^^¢¥€¥{¥¥´^>¥®¥^¥¥^¥´<¥<¥_^_<_{^{_^_^__^___^_×®__×^_®•___`•`®_•`^®<{^€€÷÷±^÷±÷•´¡¡¡+___£€€€°€{```^^^^{®^^`^^^€^®®®<^®^€^®<>®€^®><°®¥¥¢_´¥´{__¥®÷^×€°•××•°``__¥•×××יטאגעכגעםכסםכבחעםכיםעעעתםתכסםעכםכםםכתגכםועע7ו7טםו7כ7טכו7ע8עםכטכץכםכת8עעתעוחלנחחנחוטנווהטההמנננממננמנההטעייעכםץץכץכטויןןובןטן8ןט9ו8ןםןטןןםגןגםגדתגגוןןלטככללטחטתכטכתכתככתטתכככתטתכםטםכםכםטםסככןםםאם3םאגטטטםטטטכםץגיעץאןןןטגץןגםאיןאאץןץאןץטןטכןץן9טיטחטטטןאאיאיגגייגגגםטי4עאןןתעייםכחככחחכחכחחכככיחגיכיץיץיחכ9םכחץץץץח3פםיטץייץץט30ם33טי3ץץיטץםטיץטטחטץיט9ןיכץץכ0םםץץץיי33יץיייץגןןםןסץייסםסםסןבאםסןןייססחכסחיחכחיייכםחגגגאאאאאאיייכץיץץיניסארחץכרר2אעעיייםםםתהכ3יץ3יץי3כ333ג3גץיי333גי22גגגץ2גיגץיזייייייייייכיץגץץיגץכ3ץיכתיגתיהיגץ2יהתגגג3איץנךהיתהץיגיסתיהץגהיגההתגגגהתעכככץהגתתתיגייתגהתג3ץיגג3יהכתהזץהגגיהתגגגיררררי33כסתיייכככייי3ייייכייסץגגגגבהסבבהיננללגסההננמצמבסנכ׳גגגאאוטּטאאןּטןתכ׳׆׆׳׆כת׳ת׳תת׳ת׳ת׳תכגּכגתכת׳׆׆״ןכ9׳ת׳׆׳׆תי׆י׆תכ׳7דתג8ד9ג9ת׆׆תג׆גגתגּכ׳תי׆׳8ג7ג9כ8א9ג89ט9טוּכת׆כת׳כתכ׆כתג׆׳תכ׆׳תת׳תכ8כתכ׳ת׳8׳9י97ט9׳8׳8ד9ן7כ9טג9כ9טו8גכתבללבלבבל״ב״בב״זיז״ס״ס״בלב״בלב״בלסזזסלס״סלכלב״בללבלב״סלס״סיסלבלבלב״סב״ב״סלבלל׳לכל״כ׳ל׳לכל׳גס״ס״בב״סב״ב״סלכלגיזדיג״ללבייךי״,נ,יך׳תכתככ״ז״סלל״כ׳ך׳לכגלגוככבנל״בססיייההה״״י״ל״ל״״״לייעכוןןןעיעעעעעעעעייייייוכיחעיםחחחיכםןעעעיייחלעיחחחתתעוןןןוטאאכעעעגןווטוםןםםתתתטטווםתםןותראגגגכככדדדדששששקקקקקרראגככככעעעעעייייחתתתץץפפפפפץץםןוט`°®®¥¥_`••¥¥¥°¥••÷××÷^°`¥°_´_¥®®®®®®¥¥•®®®®®°_+[[+[{[[[[]]][+[+´´´´´´__¥®®^×-×
Start a new codespace

Click the Code button on your repository's landing page.
Click the Codespaces tab.
Click Create codespaces on main to create the codespace.
After the codespace has initialized there will be a terminal present.
Verify the GitHub Actions Importer CLI is installed and working. More information on the GitHub Actions Importer extension for the official GitHub CLI can be found here.

Run the following command in the codespace terminal:

gh actions-importer version
Verify the output is similar to below.

$ gh actions-importer version
gh version 2.14.3 (2022-07-26)
gh actions-importer        github/gh-actions-importer v0.1.12
actions-importer/cli       unknown
If gh actions-importer version did not produce similar output, please refer to the troubleshooting section.

Bootstrap a GitLab server
Execute the GitLab setup script that will start a container with GitLab running inside of it. The script should be executed when starting a new codespace or restarting an existing one.

Run the following command from the codespace terminal:

./gitlab/bootstrap/setup.sh
After some time, a pop-up box should appear with a link to the URL for your GitLab server.

You can also access the URL by going to the Ports tab in your terminal. Right-click the URL listed under the Local Address and click the Open in Browser tab.

Open the GitLab server in your browser and use the following credentials to authenticate:

Username: root
Password: actions-importer-labs!
Once authenticated, you should see a GitLab server with a few predefined pipelines in the actions-importer group.

Labs for GitLab
Perform the following labs to learn more about Actions migrations with GitHub Actions Importer:

Configure credentials for GitHub Actions Importer
Perform an audit on GitLab pipelines
Forecast potential build runner usage
Perform a dry-run migration of a GitLab pipeline
Use custom transformers to customize GitHub Actions Importer's behavior
Perform a production migration of a GitLab pipeline
Troubleshoot the GitHub Actions Importer CLI
The CLI extension for GitHub Actions Importer can be manually installed by following these steps:

Verify you are in the codespace terminal

Run this command from within the codespace terminal:

gh extension install github/gh-actions-importer
Verify the result of the install contains:

$ gh extension install github/gh-actions-importer
✓ Installed extension github/gh-actions-importer
Verify GitHub Actions Importer CLI extension is installed and working by running the following command from the codespace terminal:

gh actions-importer version
**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Desktop (please complete the following information):**
 - OS: [e.g. iOS]
 - Browser [e.g. chrome, safari]
 - Version [e.g. 22]

**Smartphone (please complete the following information):**
 - Device: [e.g. iPhone6]
 - OS: [e.g. iOS8.1]
 - Browser [e.g. stock browser, safari]
 - Version [e.g. 22]

**Additional context**
Add any other context about the problem here.**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.https://github.com/bradford80USA/unamed/actions/workflows/azure-container-webapp.yml1998350Program Overview
Privileges of Membership
Over 1300 organizations and individuals parti-
cipate in the JCP program. While there are no
obligatory duties, members have the opportunity
to influence the evolution of Java technology
through the development of Java Specification
Requests (JSR).
Members can license their Java specifications
under a variety of licenses, including open source
options. Anyone must be able to create an indepen-
dent implementation as long as they license and pass the
TCK to ensure compatibility. Members must also
make the option available to license the TCK and
RI separately. In addition, individuals, educational
organizations, and qualified nonprofits must have
access to the TCKs free of charge.
Successful Members:
• Review proposed JSRs and drafts
• Submit JSRs
• Nominate themselves or others to serve
on Expert Groups, which create or revise
specifications
• Build independent implementations
• Vote on EC membership ballots
• Nominate themselves for an EC seat
Members of an Expert Group may also:
• Serve as the Specification Lead of an
Expert Group
• Select others to join their Expert Group
• Use feedback from members and the public
to improve the quality of a specification
• Complete a specification, its RI, and its
associated TCK
• Maintain a specification after it is written
How to Become a Member
A person or organization can become a member
by signing the Java Specification Participation
Agreement (JSPA). This agreement between an
organization or individual and Oracle establishes
each member’s rights and obligations when partici-
pating in the JCP program. To cover costs, the JSPA
charges a nominal fee for commercial entities, but it
is free for Java User Groups and individuals.
The Java Specification Review Process
Currently, over 350 JSRs are in development.
A specification follows four major steps as it
progresses through the process, as shown in
the timeline.
1. INITIATION: A specification is initiated by one or
more members and approved for development
by the Executive Committee.
2. EARLY DRAFT: A group of experts is formed to
draft the specification for the public, community
and the Executive Committee to review. The
Expert Group uses feedback from the review to
revise the specification.
3. PUBLIC DRAFT: The draft is posted on the Internet
for a second review by the public. The Expert
Group uses the feedback to refine the document.
The Executive Committee decides if the draft
should proceed to the next step. The Specification
Lead ensures that the RI and its associated TCK
are completed before sending the specification to
the Executive Committee for final approval.
Java Community Process Program Overview
The Java Community Process (JCP) program is the formalization of the open, inclusive
process that has been used since 1998 to develop and revise Java technology specifications,
reference implementations (RI), and technology compatibility kits (TCK). Jav1300
  Start a new codespace.

Click the Code button on your repository's landing page.
Click the Codespaces tab.
Click Create codespaces on main to create the codespace.
After the codespace has initialized there will be a terminal present.
Verify the GitHub Actions Importer CLI is installed and working. More information on the GitHub Actions Importer extension for the official GitHub CLI can be found here.

Run the following command in the codespace terminal:

gh actions-importer version
Verify the output is similar to below.

$ gh actions-importer version
gh version 2.14.3 (2022-07-26)
gh actions-importer        github/gh-actions-importer v0.1.12
actions-importer/cli       unknown
If gh actions-importer version did not produce similar output, please refer to the troubleshooting section.

Bootstrap your Azure DevOps organization
Create an Azure DevOps personal access token (PAT):

Navigate to your existing organization (https://dev.azure.com/:organization) in your browser.
In the top right corner of the screen, click User settings.
Click Personal access tokens.
Select + New Token
Name your token, select the organization where you want to use the token, and set your token to automatically expire after a set number of days.
Select the following scopes (you may need to select Show all scopes at the bottom of the page to reveal all scopes):
Agents Pool: Read
Build: Read & execute
Code: Read & write
Project and Team: Read, write, & manage
Release: Read
Service Connections: Read
Task Groups: Read
Variable Groups: Read
Click Create.
Copy the generated API token and save it in a safe location.
Execute the Azure DevOps setup script that will create a new Azure DevOps project in your organization to be used in the following labs. This script should only be run once.

Run the following command from the codespace terminal, replacing the values accordingly:

:organization: the name of your existing Azure DevOps organization
:project: the name of the project to be created in your Azure DevOps organization
:access_token: the PAT created in step 1 above
./azure_devops/bootstrap/setup --organization :organization --project :project --access-token :access-token
Open the newly created Azure DevOps project in your browser (https://dev.azure.com/:organization/:project)

Once authenticated, you will see an Azure DevOps project with a few predefined pipelines.
Labs for Azure DevOps
Perform the following labs to learn how to migrate Azure DevOps pipelines to GitHub Actions using GitHub Actions Importer:

Configure credentials for GitHub Actions Importer
Perform an audit of an Azure DevOps project
Forecast potential build runner usage
Perform a dry-run migration of an Azure DevOps pipeline
Use custom transformers to customize GitHub Actions Importer's behavior
Perform a production migration of a Azure DevOps pipeline
Troubleshoot the GitHub Actions Importer CLI
The CLI extension for GitHub Actions Importer can be manually installed by following these steps:

Verify you are in the codespace terminal

Run this command from within the codespace terminal:

gh extension install github/gh-actions-importer
Verify the result of the install contains:

$ gh extension install github/gh-actions-importer
✓ Installed extension github/gh-actions-importer
Verify GitHub Actions Importer CLI extension is installed and working by running the following command from the codespace terminal:

gh actions-importer versionhttps://dev.azure.com/:organizationhttps://dev.azure.com/:organization/:project1{"$id":"1","innerException":null,"message":"A potentially dangerous Request.Path value was detected from the client (:).","typeName":"System.Web.HttpException, System.Web","typeKey":"HttpException","errorCode":0,"eventId":0}
Integrations are tools that extend GitHub's functionality. Integrations can do things on GitHub like open issues, comment on pull requests, and manage projects. They can also do things outside of GitHub based on events that happen on GitHub. For example, an integration can post on Slack when an issue is opened on GitHub.

Many integrations are GitHub Apps, GitHub Actions workflows, or custom actions for GitHub Actions workflows.

    GitHub Apps are integrations that run on the app owner's server or on a user device. For more information, see "About creating GitHub Apps."
    GitHub Actions workflows are workflows that run when specific events occur on GitHub. For more information, see "Understanding GitHub Actions."
    Custom actions are code that can be executed by a GitHub Actions workflow. For more information, see "About custom actions."

Your integration can use GitHub's API to fetch data and make changes to data on GitHub. GitHub has a REST API and a GraphQL API. For more information, see:

    "Comparing GitHub's REST API and GraphQL API"
    "GitHub REST API documentation"
    "GitHub GraphQL API documentation"

Your integration can use webhooks to learn when specific events happen on GitHub. For more information, see "About webhooks."

If your integration is a GitHub App or custom action, you can publish your integration on GitHub Marketplace. For more information, see "About GitHub Marketplace for apps" and "Publishing actions in GitHub MarkeStart a new codespace.

Click the Code button on your repository's landing page.
Click the Codespaces tab.
Click Create codespaces on main to create the codespace.
After the codespace has initialized there will be a terminal present.
Verify the GitHub Actions Importer CLI is installed and working. More information on the GitHub Actions Importer extension for the official GitHub CLI can be found here.

Run the following command in the codespace terminal:

gh actions-importer version
Verify the output is similar to below.

$ gh actions-importer version
gh version 2.14.3 (2022-07-26)
gh actions-importer        github/gh-actions-importer v0.1.12
actions-importer/cli       unknown
If gh actions-importer version did not produce similar output, please refer to the troubleshooting section.

Bootstrap your Azure DevOps organization
Create an Azure DevOps personal access token (PAT):

Navigate to your existing organization (https://dev.azure.com/:organization) in your browser.
In the top right corner of the screen, click User settings.
Click Personal access tokens.
Select + New Token
Name your token, select the organization where you want to use the token, and set your token to automatically expire after a set number of days.
Select the following scopes (you may need to select Show all scopes at the bottom of the page to reveal all scopes):
Agents Pool: Read
Build: Read & execute
Code: Read & write
Project and Team: Read, write, & manage
Release: Read
Service Connections: Read
Task Groups: Read
Variable Groups: Read
Click Create.
Copy the generated API token and save it in a safe location.
Execute the Azure DevOps setup script that will create a new Azure DevOps project in your organization to be used in the following labs. This script should only be run once.

Run the following command from the codespace terminal, replacing the values accordingly:

:organization: the name of your existing Azure DevOps organization
:project: the name of the project to be created in your Azure DevOps organization
:access_token: the PAT created in step 1 above
./azure_devops/bootstrap/setup --organization :organization --project :project --access-token :access-token
Open the newly created Azure DevOps project in your browser (https://dev.azure.com/:organization/:project)

Once authenticated, you will see an Azure DevOps project with a few predefined pipelines.
Labs for Azure DevOps
Perform the following labs to learn how to migrate Azure DevOps pipelines to GitHub Actions using GitHub Actions Importer:

Configure credentials for GitHub Actions Importer
Perform an audit of an Azure DevOps project
Forecast potential build runner usage
Perform a dry-run migration of an Azure DevOps pipeline
Use custom transformers to customize GitHub Actions Importer's behavior
Perform a production migration of a Azure DevOps pipeline
Troubleshoot the GitHub Actions Importer CLI
The CLI extension for GitHub Actions Importer can be manually installed by following these steps:

Verify you are in the codespace terminal

Run this command from within the codespace terminal:

gh extension install github/gh-actions-importer
Verify the result of the install contains:

$ gh extension install github/gh-actions-importer
✓ Installed extension github/gh-actions-importer
Verify GitHub Actions Importer CLI extension is installed and working by running the following command from the codespace terminal:

gh actions-importer versionhttps://dev.azure.com/:organization1
In this lab, you will build upon the dry-run command to override GitHub Actions Importer's default behavior and customize the converted workflow using "custom transformers." Custom transformers can be used to:

Convert items that are not automatically converted.
Convert items that were automatically converted using different actions.
Convert environment variable values differently.
Convert references to runners to use a different runner name in GitHub Actions.
Prerequisites
Followed the steps here to set up your GitHub Codespaces environment.
Completed the configure lab.
Completed the dry-run lab.
Perform a dry run
You will be performing a dry-run command to inspect the workflow that is converted by default. Run the following command within the codespace terminal:

gh actions-importer dry-run bitbucket --output-dir tmp/dry-run --workspace actions-importer --repository node-deploy --source-file-path ./bitbucket/bootstrap/source_files/node_deploy.yml
The converted workflow that is generated by the above command can be seen below:

Converted workflow 👇
Note: You can refer to the previous lab to learn about the fundamentals of the dry-run command.

Custom transformers for an unknown step
The converted workflow above contains a atlassian/unknown-azure-deploy step that was not automatically converted. Let's write a custom transformer to handle this unknown pipe!

Let's answer the following questions before proceeding to write a custom transformer.

What is the "identifier" of the step to customize? This should be the identifier from the comment in the workflow without the version, or in other words the name of the pipe.
atlassian/unknown-azure-deploy
What is the desired Actions syntax to use instead?
Upon conducting some research, you've discovered that the Azure Web App and Azure Login actions available in the marketplace offer comparable functionality.
- uses: azure/login@v1.4.6
  with:
    creds: "${{ secrets.AZURE_CREDENTIALS }}"
- uses: azure/webapps-deploy@v2.2.5
  with:
    app-name: my-site
    package: my-package.zip
    resource-group-name: "$AZURE_RESOURCE_GROUP"
Now you can begin to write the custom transformer. Custom transformers use a DSL built on top of Ruby and should be defined in a file with the .rb file extension. You can create this file by running the following command in your codespace terminal:

touch transformers.rb && code transformersmy-package.ziptransformers.rbIntegrations are tools that extend GitHub's functionality. Integrations can do things on GitHub like open issues, comment on pull requests, and manage projects. They can also do things outside of GitHub based on events that happen on GitHub. For example, an integration can post on Slack when an issue is opened on GitHub.

Many integrations are GitHub Apps, GitHub Actions workflows, or custom actions for GitHub Actions workflows.

    GitHub Apps are integrations that run on the app owner's server or on a user device. For more information, see "About creating GitHub Apps."
    GitHub Actions workflows are workflows that run when specific events occur on GitHub. For more information, see "Understanding GitHub Actions."
    Custom actions are code that can be executed by a GitHub Actions workflow. For more information, see "About custom actions."

Your integration can use GitHub's API to fetch data and make changes to data on GitHub. GitHub has a REST API and a GraphQL API. For more information, see:

    "Comparing GitHub's REST API and GraphQL API"
    "GitHub REST API documentation"
    "GitHub GraphQL API documentation"

Your integration can use webhooks to learn when specific events happen on GitHub. For more information, see "About webhooks."

If your integration is a GitHub App or custom action, you can publish your integration on GitHub Marketplace. For more information, see "About GitHub Marketplace for apps" and "Publishing actions in GitHub MarkeStart a new codespace.

Click the Code button on your repository's landing page.
Click the Codespaces tab.
Click Create codespaces on main to create the codespace.
After the codespace has initialized there will be a terminal present.
Verify the GitHub Actions Importer CLI is installed and working. More information on the GitHub Actions Importer extension for the official GitHub CLI can be found here.

Run the following command in the codespace terminal:

gh actions-importer version
Verify the output is similar to below.

$ gh actions-importer version
gh version 2.14.3 (2022-07-26)
gh actions-importer        github/gh-actions-importer v0.1.12
actions-importer/cli       unknown
If gh actions-importer version did not produce similar output, please refer to the troubleshooting section.

Bootstrap your Azure DevOps organization
Create an Azure DevOps personal access token (PAT):

Navigate to your existing organization (https://dev.azure.com/:organization) in your browser.
In the top right corner of the screen, click User settings.
Click Personal access tokens.
Select + New Token
Name your token, select the organization where you want to use the token, and set your token to automatically expire after a set number of days.
Select the following scopes (you may need to select Show all scopes at the bottom of the page to reveal all scopes):
Agents Pool: Read
Build: Read & execute
Code: Read & write
Project and Team: Read, write, & manage
Release: Read
Service Connections: Read
Task Groups: Read
Variable Groups: Read
Click Create.
Copy the generated API token and save it in a safe location.
Execute the Azure DevOps setup script that will create a new Azure DevOps project in your organization to be used in the following labs. This script should only be run once.

Run the following command from the codespace terminal, replacing the values accordingly:

:organization: the name of your existing Azure DevOps organization
:project: the name of the project to be created in your Azure DevOps organization
:access_token: the PAT created in step 1 above
./azure_devops/bootstrap/setup --organization :organization --project :project --access-token :access-token
Open the newly created Azure DevOps project in your browser (https://dev.azure.com/:organization/:project)

Once authenticated, you will see an Azure DevOps project with a few predefined pipelines.
Labs for Azure DevOps
Perform the following labs to learn how to migrate Azure DevOps pipelines to GitHub Actions using GitHub Actions Importer:

Configure credentials for GitHub Actions Importer
Perform an audit of an Azure DevOps project
Forecast potential build runner usage
Perform a dry-run migration of an Azure DevOps pipeline
Use custom transformers to customize GitHub Actions Importer's behavior
Perform a production migration of a Azure DevOps pipeline
Troubleshoot the GitHub Actions Importer CLI
The CLI extension for GitHub Actions Importer can be manually installed by following these steps:

Verify you are in the codespace terminal

Run this command from within the codespace terminal:

gh extension install github/gh-actions-importer
Verify the result of the install contains:

$ gh extension install github/gh-actions-importer
✓ Installed extension github/gh-actions-importer
Verify GitHub Actions Importer CLI extension is installed and working by running the following command from the codespace terminal:

gh actions-importer versionhttps://dev.azure.com/:organization